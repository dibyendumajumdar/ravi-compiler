return

function()
--upvalues  _ENV*
  return
end
function()
--upvalues  _ENV*
  return
end
define Proc%1
L0 (entry)
	RET {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>RET {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 1

function()
--upvalues  _ENV*
  return
    1
end
function()
--upvalues  _ENV*
  return
    1
end
define Proc%1
L0 (entry)
	RET {1 Kint(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>RET {1 Kint(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 42, 4.2, true, 'hello'

function()
--upvalues  _ENV*
  return
    42
   ,
    4.2000000000000002
   ,
    true
   ,
    'hello'
end
function()
--upvalues  _ENV*
  return
    42
   ,
    4.2000000000000002
   ,
    true
   ,
    'hello'
end
define Proc%1
L0 (entry)
	RET {42 Kint(0), 4.2E0 Kflt(0), true, 'hello' Ks(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>RET {42 Kint(0), 4.2E0 Kflt(0), true, 'hello' Ks(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 1+2

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     1
    +
     2
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] integer
     1
    +
     2
    --[binary expr end]
end
define Proc%1
L0 (entry)
	ADDii {1 Kint(0), 2 Kint(1)} {Tint(0)}
	RET {Tint(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>ADDii {1 Kint(0), 2 Kint(1)} {Tint(0)}</TD></TR>
<TR><TD>RET {Tint(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 2^3-5*4

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      2
     ^
      3
     --[binary expr end]
    -
     --[binary expr start] any
      5
     *
      4
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] number
     --[binary expr start] number
      2
     ^
      3
     --[binary expr end]
    -
     --[binary expr start] integer
      5
     *
      4
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	POW {2 Kint(0), 3 Kint(1)} {Tflt(0)}
	MULii {5 Kint(2), 4 Kint(3)} {Tint(0)}
	SUBfi {Tflt(0), Tint(0)} {Tflt(0)}
	RET {Tflt(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>POW {2 Kint(0), 3 Kint(1)} {Tflt(0)}</TD></TR>
<TR><TD>MULii {5 Kint(2), 4 Kint(3)} {Tint(0)}</TD></TR>
<TR><TD>SUBfi {Tflt(0), Tint(0)} {Tflt(0)}</TD></TR>
<TR><TD>RET {Tflt(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 1+1

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     1
    +
     1
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] integer
     1
    +
     1
    --[binary expr end]
end
define Proc%1
L0 (entry)
	ADDii {1 Kint(0), 1 Kint(0)} {Tint(0)}
	RET {Tint(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>ADDii {1 Kint(0), 1 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>RET {Tint(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 1+1+1

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      1
     +
      1
     --[binary expr end]
    +
     1
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] integer
     --[binary expr start] integer
      1
     +
      1
     --[binary expr end]
    +
     1
    --[binary expr end]
end
define Proc%1
L0 (entry)
	ADDii {1 Kint(0), 1 Kint(0)} {Tint(0)}
	ADDii {Tint(0), 1 Kint(0)} {Tint(0)}
	RET {Tint(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>ADDii {1 Kint(0), 1 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>ADDii {Tint(0), 1 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>RET {Tint(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 2-3/5*4

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     2
    -
     --[binary expr start] any
      --[binary expr start] any
       3
      /
       5
      --[binary expr end]
     *
      4
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] number
     2
    -
     --[binary expr start] number
      --[binary expr start] number
       3
      /
       5
      --[binary expr end]
     *
      4
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	DIVii {3 Kint(1), 5 Kint(2)} {Tflt(0)}
	MULfi {Tflt(0), 4 Kint(3)} {Tflt(0)}
	SUBif {2 Kint(0), Tflt(0)} {Tflt(0)}
	RET {Tflt(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>DIVii {3 Kint(1), 5 Kint(2)} {Tflt(0)}</TD></TR>
<TR><TD>MULfi {Tflt(0), 4 Kint(3)} {Tflt(0)}</TD></TR>
<TR><TD>SUBif {2 Kint(0), Tflt(0)} {Tflt(0)}</TD></TR>
<TR><TD>RET {Tflt(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 4.2//5

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     4.2000000000000002
    //
     5
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     4.2000000000000002
    //
     5
    --[binary expr end]
end
define Proc%1
L0 (entry)
	IDIV {4.2E0 Kflt(0), 5 Kint(0)} {T(0)}
	RET {T(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>IDIV {4.2E0 Kflt(0), 5 Kint(0)} {T(0)}</TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 0.0

function()
--upvalues  _ENV*
  return
    0.0000000000000000
end
function()
--upvalues  _ENV*
  return
    0.0000000000000000
end
define Proc%1
L0 (entry)
	RET {0E0 Kflt(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>RET {0E0 Kflt(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 0

function()
--upvalues  _ENV*
  return
    0
end
function()
--upvalues  _ENV*
  return
    0
end
define Proc%1
L0 (entry)
	RET {0 Kint(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>RET {0 Kint(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return -0//1

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[unary expr start] any
     -
      0
     --[unary expr end]
    //
     1
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] integer
     --[unary expr start] integer
     -
      0
     --[unary expr end]
    //
     1
    --[binary expr end]
end
define Proc%1
L0 (entry)
	UNMi {0 Kint(0)} {Tint(0)}
	IDIV {Tint(0), 1 Kint(1)} {Tint(0)}
	RET {Tint(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>UNMi {0 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>IDIV {Tint(0), 1 Kint(1)} {Tint(0)}</TD></TR>
<TR><TD>RET {Tint(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 3^-1

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     3
    ^
     --[unary expr start] any
     -
      1
     --[unary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] number
     3
    ^
     --[unary expr start] integer
     -
      1
     --[unary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	UNMi {1 Kint(1)} {Tint(0)}
	POW {3 Kint(0), Tint(0)} {Tflt(0)}
	RET {Tflt(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>UNMi {1 Kint(1)} {Tint(0)}</TD></TR>
<TR><TD>POW {3 Kint(0), Tint(0)} {Tflt(0)}</TD></TR>
<TR><TD>RET {Tflt(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return (1 + 1)^(50 + 50)

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[suffixed expr start] any
      --[primary start] any
       --[binary expr start] any
        1
       +
        1
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    ^
     --[suffixed expr start] any
      --[primary start] any
       --[binary expr start] any
        50
       +
        50
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] number
     --[suffixed expr start] integer
      --[primary start] integer
       --[binary expr start] integer
        1
       +
        1
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    ^
     --[suffixed expr start] integer
      --[primary start] integer
       --[binary expr start] integer
        50
       +
        50
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	ADDii {1 Kint(0), 1 Kint(0)} {Tint(0)}
	ADDii {50 Kint(1), 50 Kint(1)} {Tint(1)}
	POW {Tint(0), Tint(1)} {Tflt(0)}
	RET {Tflt(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>ADDii {1 Kint(0), 1 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>ADDii {50 Kint(1), 50 Kint(1)} {Tint(1)}</TD></TR>
<TR><TD>POW {Tint(0), Tint(1)} {Tflt(0)}</TD></TR>
<TR><TD>RET {Tflt(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return (-2)^(31 - 2)

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[suffixed expr start] any
      --[primary start] any
       --[unary expr start] any
       -
        2
       --[unary expr end]
      --[primary end]
     --[suffixed expr end]
    ^
     --[suffixed expr start] any
      --[primary start] any
       --[binary expr start] any
        31
       -
        2
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] number
     --[suffixed expr start] integer
      --[primary start] integer
       --[unary expr start] integer
       -
        2
       --[unary expr end]
      --[primary end]
     --[suffixed expr end]
    ^
     --[suffixed expr start] integer
      --[primary start] integer
       --[binary expr start] integer
        31
       -
        2
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	UNMi {2 Kint(0)} {Tint(0)}
	SUBii {31 Kint(1), 2 Kint(0)} {Tint(1)}
	POW {Tint(0), Tint(1)} {Tflt(0)}
	RET {Tflt(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>UNMi {2 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>SUBii {31 Kint(1), 2 Kint(0)} {Tint(1)}</TD></TR>
<TR><TD>POW {Tint(0), Tint(1)} {Tflt(0)}</TD></TR>
<TR><TD>RET {Tflt(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return (-3^0 + 5) // 3.0

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[suffixed expr start] any
      --[primary start] any
       --[binary expr start] any
        --[unary expr start] any
        -
         --[binary expr start] any
          3
         ^
          0
         --[binary expr end]
        --[unary expr end]
       +
        5
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    //
     3.0000000000000000
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[suffixed expr start] number
      --[primary start] number
       --[binary expr start] number
        --[unary expr start] number
        -
         --[binary expr start] number
          3
         ^
          0
         --[binary expr end]
        --[unary expr end]
       +
        5
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    //
     3.0000000000000000
    --[binary expr end]
end
define Proc%1
L0 (entry)
	POW {3 Kint(0), 0 Kint(1)} {Tflt(0)}
	UNMf {Tflt(0)} {Tflt(0)}
	ADDfi {Tflt(0), 5 Kint(2)} {Tflt(0)}
	IDIV {Tflt(0), 3E0 Kflt(0)} {T(0)}
	RET {T(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>POW {3 Kint(0), 0 Kint(1)} {Tflt(0)}</TD></TR>
<TR><TD>UNMf {Tflt(0)} {Tflt(0)}</TD></TR>
<TR><TD>ADDfi {Tflt(0), 5 Kint(2)} {Tflt(0)}</TD></TR>
<TR><TD>IDIV {Tflt(0), 3E0 Kflt(0)} {T(0)}</TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 0xF0.0 | 0xCC.0 ~ 0xAA & 0xFD

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     240.0000000000000000
    |
     --[binary expr start] any
      204.0000000000000000
     ~
      --[binary expr start] any
       170
      &
       253
      --[binary expr end]
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] integer
     240.0000000000000000
    |
     --[binary expr start] integer
      204.0000000000000000
     ~
      --[binary expr start] integer
       170
      &
       253
      --[binary expr end]
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	BANDii {170 Kint(0), 253 Kint(1)} {Tint(0)}
	BXOR {2.04E2 Kflt(1), Tint(0)} {Tint(0)}
	BOR {2.4E2 Kflt(0), Tint(0)} {Tint(0)}
	RET {Tint(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>BANDii {170 Kint(0), 253 Kint(1)} {Tint(0)}</TD></TR>
<TR><TD>BXOR {2.04E2 Kflt(1), Tint(0)} {Tint(0)}</TD></TR>
<TR><TD>BOR {2.4E2 Kflt(0), Tint(0)} {Tint(0)}</TD></TR>
<TR><TD>RET {Tint(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return ~(~0xFF0 | 0xFF0)

function()
--upvalues  _ENV*
  return
    --[unary expr start] any
    ~
     --[suffixed expr start] any
      --[primary start] any
       --[binary expr start] any
        --[unary expr start] any
        ~
         4080
        --[unary expr end]
       |
        4080
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    --[unary expr end]
end
function()
--upvalues  _ENV*
  return
    --[unary expr start] any
    ~
     --[suffixed expr start] any
      --[primary start] any
       --[binary expr start] any
        --[unary expr start] any
        ~
         4080
        --[unary expr end]
       |
        4080
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    --[unary expr end]
end
define Proc%1
L0 (entry)
	BNOT {4080 Kint(0)} {T(0)}
	BOR {T(0), 4080 Kint(0)} {T(0)}
	BNOT {T(0)} {T(0)}
	RET {T(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>BNOT {4080 Kint(0)} {T(0)}</TD></TR>
<TR><TD>BOR {T(0), 4080 Kint(0)} {T(0)}</TD></TR>
<TR><TD>BNOT {T(0)} {T(0)}</TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return ~~-100024.0

function()
--upvalues  _ENV*
  return
    --[unary expr start] any
    ~
     --[unary expr start] any
     ~
      --[unary expr start] any
      -
       100024.0000000000000000
      --[unary expr end]
     --[unary expr end]
    --[unary expr end]
end
function()
--upvalues  _ENV*
  return
    --[unary expr start] any
    ~
     --[unary expr start] any
     ~
      --[unary expr start] number
      -
       100024.0000000000000000
      --[unary expr end]
     --[unary expr end]
    --[unary expr end]
end
define Proc%1
L0 (entry)
	UNMf {1.00024E5 Kflt(0)} {Tflt(0)}
	BNOT {Tflt(0)} {T(0)}
	BNOT {T(0)} {T(0)}
	RET {T(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>UNMf {1.00024E5 Kflt(0)} {Tflt(0)}</TD></TR>
<TR><TD>BNOT {Tflt(0)} {T(0)}</TD></TR>
<TR><TD>BNOT {T(0)} {T(0)}</TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return ((100 << 6) << -4) >> 2

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[suffixed expr start] any
      --[primary start] any
       --[binary expr start] any
        --[suffixed expr start] any
         --[primary start] any
          --[binary expr start] any
           100
          <<
           6
          --[binary expr end]
         --[primary end]
        --[suffixed expr end]
       <<
        --[unary expr start] any
        -
         4
        --[unary expr end]
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    >>
     2
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] integer
     --[suffixed expr start] integer
      --[primary start] integer
       --[binary expr start] integer
        --[suffixed expr start] integer
         --[primary start] integer
          --[binary expr start] integer
           100
          <<
           6
          --[binary expr end]
         --[primary end]
        --[suffixed expr end]
       <<
        --[unary expr start] integer
        -
         4
        --[unary expr end]
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    >>
     2
    --[binary expr end]
end
define Proc%1
L0 (entry)
	SHLii {100 Kint(0), 6 Kint(1)} {Tint(0)}
	UNMi {4 Kint(2)} {Tint(1)}
	SHLii {Tint(0), Tint(1)} {Tint(0)}
	SHRii {Tint(0), 2 Kint(3)} {Tint(0)}
	RET {Tint(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>SHLii {100 Kint(0), 6 Kint(1)} {Tint(0)}</TD></TR>
<TR><TD>UNMi {4 Kint(2)} {Tint(1)}</TD></TR>
<TR><TD>SHLii {Tint(0), Tint(1)} {Tint(0)}</TD></TR>
<TR><TD>SHRii {Tint(0), 2 Kint(3)} {Tint(0)}</TD></TR>
<TR><TD>RET {Tint(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 2^3^2 == 2^(3^2)

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      2
     ^
      --[binary expr start] any
       3
      ^
       2
      --[binary expr end]
     --[binary expr end]
    ==
     --[binary expr start] any
      2
     ^
      --[suffixed expr start] any
       --[primary start] any
        --[binary expr start] any
         3
        ^
         2
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] boolean
     --[binary expr start] number
      2
     ^
      --[binary expr start] number
       3
      ^
       2
      --[binary expr end]
     --[binary expr end]
    ==
     --[binary expr start] number
      2
     ^
      --[suffixed expr start] number
       --[primary start] number
        --[binary expr start] number
         3
        ^
         2
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	POW {3 Kint(1), 2 Kint(0)} {Tflt(0)}
	POW {2 Kint(0), Tflt(0)} {Tflt(0)}
	POW {3 Kint(1), 2 Kint(0)} {Tflt(1)}
	POW {2 Kint(0), Tflt(1)} {Tflt(1)}
	EQff {Tflt(0), Tflt(1)} {Tbool(0)}
	RET {Tbool(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>POW {3 Kint(1), 2 Kint(0)} {Tflt(0)}</TD></TR>
<TR><TD>POW {2 Kint(0), Tflt(0)} {Tflt(0)}</TD></TR>
<TR><TD>POW {3 Kint(1), 2 Kint(0)} {Tflt(1)}</TD></TR>
<TR><TD>POW {2 Kint(0), Tflt(1)} {Tflt(1)}</TD></TR>
<TR><TD>EQff {Tflt(0), Tflt(1)} {Tbool(0)}</TD></TR>
<TR><TD>RET {Tbool(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 2^3*4 == (2^3)*4

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       2
      ^
       3
      --[binary expr end]
     *
      4
     --[binary expr end]
    ==
     --[binary expr start] any
      --[suffixed expr start] any
       --[primary start] any
        --[binary expr start] any
         2
        ^
         3
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     *
      4
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] boolean
     --[binary expr start] number
      --[binary expr start] number
       2
      ^
       3
      --[binary expr end]
     *
      4
     --[binary expr end]
    ==
     --[binary expr start] number
      --[suffixed expr start] number
       --[primary start] number
        --[binary expr start] number
         2
        ^
         3
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     *
      4
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	POW {2 Kint(0), 3 Kint(1)} {Tflt(0)}
	MULfi {Tflt(0), 4 Kint(2)} {Tflt(0)}
	POW {2 Kint(0), 3 Kint(1)} {Tflt(1)}
	MULfi {Tflt(1), 4 Kint(2)} {Tflt(1)}
	EQff {Tflt(0), Tflt(1)} {Tbool(0)}
	RET {Tbool(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>POW {2 Kint(0), 3 Kint(1)} {Tflt(0)}</TD></TR>
<TR><TD>MULfi {Tflt(0), 4 Kint(2)} {Tflt(0)}</TD></TR>
<TR><TD>POW {2 Kint(0), 3 Kint(1)} {Tflt(1)}</TD></TR>
<TR><TD>MULfi {Tflt(1), 4 Kint(2)} {Tflt(1)}</TD></TR>
<TR><TD>EQff {Tflt(0), Tflt(1)} {Tbool(0)}</TD></TR>
<TR><TD>RET {Tbool(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 2.0^-2 == 1/4 and -2^- -2 == - - -4

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       2.0000000000000000
      ^
       --[unary expr start] any
       -
        2
       --[unary expr end]
      --[binary expr end]
     ==
      --[binary expr start] any
       1
      /
       4
      --[binary expr end]
     --[binary expr end]
    and
     --[binary expr start] any
      --[unary expr start] any
      -
       --[binary expr start] any
        2
       ^
        --[unary expr start] any
        -
         --[unary expr start] any
         -
          2
         --[unary expr end]
        --[unary expr end]
       --[binary expr end]
      --[unary expr end]
     ==
      --[unary expr start] any
      -
       --[unary expr start] any
       -
        --[unary expr start] any
        -
         4
        --[unary expr end]
       --[unary expr end]
      --[unary expr end]
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] boolean
      --[binary expr start] number
       2.0000000000000000
      ^
       --[unary expr start] integer
       -
        2
       --[unary expr end]
      --[binary expr end]
     ==
      --[binary expr start] number
       1
      /
       4
      --[binary expr end]
     --[binary expr end]
    and
     --[binary expr start] boolean
      --[unary expr start] number
      -
       --[binary expr start] number
        2
       ^
        --[unary expr start] integer
        -
         --[unary expr start] integer
         -
          2
         --[unary expr end]
        --[unary expr end]
       --[binary expr end]
      --[unary expr end]
     ==
      --[unary expr start] integer
      -
       --[unary expr start] integer
       -
        --[unary expr start] integer
        -
         4
        --[unary expr end]
       --[unary expr end]
      --[unary expr end]
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	UNMi {2 Kint(0)} {Tint(0)}
	POW {2E0 Kflt(0), Tint(0)} {Tflt(0)}
	DIVii {1 Kint(1), 4 Kint(2)} {Tflt(1)}
	EQff {Tflt(0), Tflt(1)} {Tbool(0)}
	MOV {Tbool(0)} {T(0)}
	CBR {T(0)} {L2, L3}
L1 (exit)
L2
	UNMi {2 Kint(0)} {Tint(0)}
	UNMi {Tint(0)} {Tint(0)}
	POW {2 Kint(0), Tint(0)} {Tflt(0)}
	UNMf {Tflt(0)} {Tflt(0)}
	UNMi {4 Kint(2)} {Tint(0)}
	UNMi {Tint(0)} {Tint(0)}
	UNMi {Tint(0)} {Tint(0)}
	EQ {Tflt(0), Tint(0)} {Tbool(0)}
	MOV {Tbool(0)} {T(0)}
	BR {L3}
L3
	RET {T(0)} {L1}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>UNMi {2 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>POW {2E0 Kflt(0), Tint(0)} {Tflt(0)}</TD></TR>
<TR><TD>DIVii {1 Kint(1), 4 Kint(2)} {Tflt(1)}</TD></TR>
<TR><TD>EQff {Tflt(0), Tflt(1)} {Tbool(0)}</TD></TR>
<TR><TD>MOV {Tbool(0)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L2, L3}</TD></TR>
</TABLE>>];
L0 -> L2
L0 -> L3
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>UNMi {2 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>UNMi {Tint(0)} {Tint(0)}</TD></TR>
<TR><TD>POW {2 Kint(0), Tint(0)} {Tflt(0)}</TD></TR>
<TR><TD>UNMf {Tflt(0)} {Tflt(0)}</TD></TR>
<TR><TD>UNMi {4 Kint(2)} {Tint(0)}</TD></TR>
<TR><TD>UNMi {Tint(0)} {Tint(0)}</TD></TR>
<TR><TD>UNMi {Tint(0)} {Tint(0)}</TD></TR>
<TR><TD>EQ {Tflt(0), Tint(0)} {Tbool(0)}</TD></TR>
<TR><TD>MOV {Tbool(0)} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L2 -> L3
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
}
return not nil and 2 and not(2>3 or 3<2)

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[unary expr start] any
      not
       nil
      --[unary expr end]
     and
      2
     --[binary expr end]
    and
     --[unary expr start] any
     not
      --[suffixed expr start] any
       --[primary start] any
        --[binary expr start] any
         --[binary expr start] any
          2
         >
          3
         --[binary expr end]
        or
         --[binary expr start] any
          3
         <
          2
         --[binary expr end]
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     --[unary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[unary expr start] any
      not
       nil
      --[unary expr end]
     and
      2
     --[binary expr end]
    and
     --[unary expr start] any
     not
      --[suffixed expr start] any
       --[primary start] any
        --[binary expr start] any
         --[binary expr start] boolean
          2
         >
          3
         --[binary expr end]
        or
         --[binary expr start] boolean
          3
         <
          2
         --[binary expr end]
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     --[unary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	NOT {nil} {T(2)}
	MOV {T(2)} {T(1)}
	CBR {T(1)} {L4, L5}
L1 (exit)
L2
	LIii {3 Kint(1), 2 Kint(0)} {Tbool(0)}
	MOV {Tbool(0)} {T(1)}
	CBR {T(1)} {L7, L6}
L3
	RET {T(0)} {L1}
L4
	MOV {2 Kint(0)} {T(1)}
	BR {L5}
L5
	MOV {T(1)} {T(0)}
	CBR {T(0)} {L2, L3}
L6
	LIii {3 Kint(1), 2 Kint(0)} {Tbool(0)}
	MOV {Tbool(0)} {T(1)}
	BR {L7}
L7
	NOT {T(1)} {T(1)}
	MOV {T(1)} {T(0)}
	BR {L3}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>NOT {nil} {T(2)}</TD></TR>
<TR><TD>MOV {T(2)} {T(1)}</TD></TR>
<TR><TD>CBR {T(1)} {L4, L5}</TD></TR>
</TABLE>>];
L0 -> L4
L0 -> L5
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>LIii {3 Kint(1), 2 Kint(0)} {Tbool(0)}</TD></TR>
<TR><TD>MOV {Tbool(0)} {T(1)}</TD></TR>
<TR><TD>CBR {T(1)} {L7, L6}</TD></TR>
</TABLE>>];
L2 -> L7
L2 -> L6
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
L4 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L4</B></TD></TR>
<TR><TD>MOV {2 Kint(0)} {T(1)}</TD></TR>
<TR><TD>BR {L5}</TD></TR>
</TABLE>>];
L4 -> L5
L5 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L5</B></TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L2, L3}</TD></TR>
</TABLE>>];
L5 -> L2
L5 -> L3
L6 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L6</B></TD></TR>
<TR><TD>LIii {3 Kint(1), 2 Kint(0)} {Tbool(0)}</TD></TR>
<TR><TD>MOV {Tbool(0)} {T(1)}</TD></TR>
<TR><TD>BR {L7}</TD></TR>
</TABLE>>];
L6 -> L7
L7 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L7</B></TD></TR>
<TR><TD>NOT {T(1)} {T(1)}</TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L7 -> L3
}
return -3-1-5 == 0+0-9

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       --[unary expr start] any
       -
        3
       --[unary expr end]
      -
       1
      --[binary expr end]
     -
      5
     --[binary expr end]
    ==
     --[binary expr start] any
      --[binary expr start] any
       0
      +
       0
      --[binary expr end]
     -
      9
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] boolean
     --[binary expr start] integer
      --[binary expr start] integer
       --[unary expr start] integer
       -
        3
       --[unary expr end]
      -
       1
      --[binary expr end]
     -
      5
     --[binary expr end]
    ==
     --[binary expr start] integer
      --[binary expr start] integer
       0
      +
       0
      --[binary expr end]
     -
      9
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	UNMi {3 Kint(0)} {Tint(0)}
	SUBii {Tint(0), 1 Kint(1)} {Tint(0)}
	SUBii {Tint(0), 5 Kint(2)} {Tint(0)}
	ADDii {0 Kint(3), 0 Kint(3)} {Tint(1)}
	SUBii {Tint(1), 9 Kint(4)} {Tint(1)}
	EQii {Tint(0), Tint(1)} {Tbool(0)}
	RET {Tbool(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>UNMi {3 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>SUBii {Tint(0), 1 Kint(1)} {Tint(0)}</TD></TR>
<TR><TD>SUBii {Tint(0), 5 Kint(2)} {Tint(0)}</TD></TR>
<TR><TD>ADDii {0 Kint(3), 0 Kint(3)} {Tint(1)}</TD></TR>
<TR><TD>SUBii {Tint(1), 9 Kint(4)} {Tint(1)}</TD></TR>
<TR><TD>EQii {Tint(0), Tint(1)} {Tbool(0)}</TD></TR>
<TR><TD>RET {Tbool(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return -2^2 == -4 and (-2)^2 == 4 and 2*2-3-1 == 0

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       --[unary expr start] any
       -
        --[binary expr start] any
         2
        ^
         2
        --[binary expr end]
       --[unary expr end]
      ==
       --[unary expr start] any
       -
        4
       --[unary expr end]
      --[binary expr end]
     and
      --[binary expr start] any
       --[binary expr start] any
        --[suffixed expr start] any
         --[primary start] any
          --[unary expr start] any
          -
           2
          --[unary expr end]
         --[primary end]
        --[suffixed expr end]
       ^
        2
       --[binary expr end]
      ==
       4
      --[binary expr end]
     --[binary expr end]
    and
     --[binary expr start] any
      --[binary expr start] any
       --[binary expr start] any
        --[binary expr start] any
         2
        *
         2
        --[binary expr end]
       -
        3
       --[binary expr end]
      -
       1
      --[binary expr end]
     ==
      0
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] boolean
       --[unary expr start] number
       -
        --[binary expr start] number
         2
        ^
         2
        --[binary expr end]
       --[unary expr end]
      ==
       --[unary expr start] integer
       -
        4
       --[unary expr end]
      --[binary expr end]
     and
      --[binary expr start] boolean
       --[binary expr start] number
        --[suffixed expr start] integer
         --[primary start] integer
          --[unary expr start] integer
          -
           2
          --[unary expr end]
         --[primary end]
        --[suffixed expr end]
       ^
        2
       --[binary expr end]
      ==
       4
      --[binary expr end]
     --[binary expr end]
    and
     --[binary expr start] boolean
      --[binary expr start] integer
       --[binary expr start] integer
        --[binary expr start] integer
         2
        *
         2
        --[binary expr end]
       -
        3
       --[binary expr end]
      -
       1
      --[binary expr end]
     ==
      0
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	POW {2 Kint(0), 2 Kint(0)} {Tflt(0)}
	UNMf {Tflt(0)} {Tflt(0)}
	UNMi {4 Kint(1)} {Tint(0)}
	EQ {Tflt(0), Tint(0)} {Tbool(0)}
	MOV {Tbool(0)} {T(1)}
	CBR {T(1)} {L4, L5}
L1 (exit)
L2
	MULii {2 Kint(0), 2 Kint(0)} {Tint(0)}
	SUBii {Tint(0), 3 Kint(2)} {Tint(0)}
	SUBii {Tint(0), 1 Kint(3)} {Tint(0)}
	EQii {Tint(0), 0 Kint(4)} {Tbool(0)}
	MOV {Tbool(0)} {T(0)}
	BR {L3}
L3
	RET {T(0)} {L1}
L4
	UNMi {2 Kint(0)} {Tint(0)}
	POW {Tint(0), 2 Kint(0)} {Tflt(0)}
	EQ {Tflt(0), 4 Kint(1)} {Tbool(0)}
	MOV {Tbool(0)} {T(1)}
	BR {L5}
L5
	MOV {T(1)} {T(0)}
	CBR {T(0)} {L2, L3}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>POW {2 Kint(0), 2 Kint(0)} {Tflt(0)}</TD></TR>
<TR><TD>UNMf {Tflt(0)} {Tflt(0)}</TD></TR>
<TR><TD>UNMi {4 Kint(1)} {Tint(0)}</TD></TR>
<TR><TD>EQ {Tflt(0), Tint(0)} {Tbool(0)}</TD></TR>
<TR><TD>MOV {Tbool(0)} {T(1)}</TD></TR>
<TR><TD>CBR {T(1)} {L4, L5}</TD></TR>
</TABLE>>];
L0 -> L4
L0 -> L5
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>MULii {2 Kint(0), 2 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>SUBii {Tint(0), 3 Kint(2)} {Tint(0)}</TD></TR>
<TR><TD>SUBii {Tint(0), 1 Kint(3)} {Tint(0)}</TD></TR>
<TR><TD>EQii {Tint(0), 0 Kint(4)} {Tbool(0)}</TD></TR>
<TR><TD>MOV {Tbool(0)} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L2 -> L3
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
L4 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L4</B></TD></TR>
<TR><TD>UNMi {2 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>POW {Tint(0), 2 Kint(0)} {Tflt(0)}</TD></TR>
<TR><TD>EQ {Tflt(0), 4 Kint(1)} {Tbool(0)}</TD></TR>
<TR><TD>MOV {Tbool(0)} {T(1)}</TD></TR>
<TR><TD>BR {L5}</TD></TR>
</TABLE>>];
L4 -> L5
L5 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L5</B></TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L2, L3}</TD></TR>
</TABLE>>];
L5 -> L2
L5 -> L3
}
return 2*1+3/3 == 3 and 1+2 .. 3*1 == '33'

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       --[binary expr start] any
        2
       *
        1
       --[binary expr end]
      +
       --[binary expr start] any
        3
       /
        3
       --[binary expr end]
      --[binary expr end]
     ==
      3
     --[binary expr end]
    and
     --[binary expr start] any
      --[binary expr start] any
       --[binary expr start] any
        1
       +
        2
       --[binary expr end]
      ..
       --[binary expr start] any
        3
       *
        1
       --[binary expr end]
      --[binary expr end]
     ==
      '33'
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] boolean
      --[binary expr start] number
       --[binary expr start] integer
        2
       *
        1
       --[binary expr end]
      +
       --[binary expr start] number
        3
       /
        3
       --[binary expr end]
      --[binary expr end]
     ==
      3
     --[binary expr end]
    and
     --[binary expr start] any
      --[binary expr start] any
       --[binary expr start] integer
        1
       +
        2
       --[binary expr end]
      ..
       --[binary expr start] integer
        3
       *
        1
       --[binary expr end]
      --[binary expr end]
     ==
      '33'
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	MULii {2 Kint(0), 1 Kint(1)} {Tint(0)}
	DIVii {3 Kint(2), 3 Kint(2)} {Tflt(0)}
	ADDfi {Tflt(0), Tint(0)} {Tflt(0)}
	EQ {Tflt(0), 3 Kint(2)} {Tbool(0)}
	MOV {Tbool(0)} {T(0)}
	CBR {T(0)} {L2, L3}
L1 (exit)
L2
	ADDii {1 Kint(1), 2 Kint(0)} {Tint(0)}
	MULii {3 Kint(2), 1 Kint(1)} {Tint(1)}
	CONCAT {Tint(0), Tint(1)} {T(1)}
	EQ {T(1), '33' Ks(0)} {T(1)}
	MOV {T(1)} {T(0)}
	BR {L3}
L3
	RET {T(0)} {L1}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>MULii {2 Kint(0), 1 Kint(1)} {Tint(0)}</TD></TR>
<TR><TD>DIVii {3 Kint(2), 3 Kint(2)} {Tflt(0)}</TD></TR>
<TR><TD>ADDfi {Tflt(0), Tint(0)} {Tflt(0)}</TD></TR>
<TR><TD>EQ {Tflt(0), 3 Kint(2)} {Tbool(0)}</TD></TR>
<TR><TD>MOV {Tbool(0)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L2, L3}</TD></TR>
</TABLE>>];
L0 -> L2
L0 -> L3
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>ADDii {1 Kint(1), 2 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>MULii {3 Kint(2), 1 Kint(1)} {Tint(1)}</TD></TR>
<TR><TD>CONCAT {Tint(0), Tint(1)} {T(1)}</TD></TR>
<TR><TD>EQ {T(1), '33' Ks(0)} {T(1)}</TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L2 -> L3
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
}
return not(2+1 > 3*1) and 'a'..'b' > 'a'

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[unary expr start] any
     not
      --[suffixed expr start] any
       --[primary start] any
        --[binary expr start] any
         --[binary expr start] any
          2
         +
          1
         --[binary expr end]
        >
         --[binary expr start] any
          3
         *
          1
         --[binary expr end]
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     --[unary expr end]
    and
     --[binary expr start] any
      --[binary expr start] any
       'a'
      ..
       'b'
      --[binary expr end]
     >
      'a'
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[unary expr start] any
     not
      --[suffixed expr start] boolean
       --[primary start] boolean
        --[binary expr start] boolean
         --[binary expr start] integer
          2
         +
          1
         --[binary expr end]
        >
         --[binary expr start] integer
          3
         *
          1
         --[binary expr end]
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     --[unary expr end]
    and
     --[binary expr start] any
      --[binary expr start] any
       'a'
      ..
       'b'
      --[binary expr end]
     >
      'a'
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	ADDii {2 Kint(0), 1 Kint(1)} {Tint(0)}
	MULii {3 Kint(2), 1 Kint(1)} {Tint(1)}
	LIii {Tint(1), Tint(0)} {Tbool(0)}
	NOT {Tbool(0)} {T(1)}
	MOV {T(1)} {T(0)}
	CBR {T(0)} {L2, L3}
L1 (exit)
L2
	CONCAT {'a' Ks(0), 'b' Ks(1)} {T(1)}
	LT {'a' Ks(0), T(1)} {T(1)}
	MOV {T(1)} {T(0)}
	BR {L3}
L3
	RET {T(0)} {L1}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>ADDii {2 Kint(0), 1 Kint(1)} {Tint(0)}</TD></TR>
<TR><TD>MULii {3 Kint(2), 1 Kint(1)} {Tint(1)}</TD></TR>
<TR><TD>LIii {Tint(1), Tint(0)} {Tbool(0)}</TD></TR>
<TR><TD>NOT {Tbool(0)} {T(1)}</TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L2, L3}</TD></TR>
</TABLE>>];
L0 -> L2
L0 -> L3
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>CONCAT {'a' Ks(0), 'b' Ks(1)} {T(1)}</TD></TR>
<TR><TD>LT {'a' Ks(0), T(1)} {T(1)}</TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L2 -> L3
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
}
return '7' .. 3 << 1 == 146

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       '7'
      ..
       3
      --[binary expr end]
     <<
      1
     --[binary expr end]
    ==
     146
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       '7'
      ..
       3
      --[binary expr end]
     <<
      1
     --[binary expr end]
    ==
     146
    --[binary expr end]
end
define Proc%1
L0 (entry)
	CONCAT {'7' Ks(0), 3 Kint(0)} {T(0)}
	SHL {T(0), 1 Kint(1)} {T(0)}
	EQ {T(0), 146 Kint(2)} {T(0)}
	RET {T(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>CONCAT {'7' Ks(0), 3 Kint(0)} {T(0)}</TD></TR>
<TR><TD>SHL {T(0), 1 Kint(1)} {T(0)}</TD></TR>
<TR><TD>EQ {T(0), 146 Kint(2)} {T(0)}</TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 10 >> 1 .. '9' == 0

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      10
     >>
      --[binary expr start] any
       1
      ..
       '9'
      --[binary expr end]
     --[binary expr end]
    ==
     0
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      10
     >>
      --[binary expr start] any
       1
      ..
       '9'
      --[binary expr end]
     --[binary expr end]
    ==
     0
    --[binary expr end]
end
define Proc%1
L0 (entry)
	CONCAT {1 Kint(1), '9' Ks(0)} {T(0)}
	SHR {10 Kint(0), T(0)} {T(0)}
	EQ {T(0), 0 Kint(2)} {T(0)}
	RET {T(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>CONCAT {1 Kint(1), '9' Ks(0)} {T(0)}</TD></TR>
<TR><TD>SHR {10 Kint(0), T(0)} {T(0)}</TD></TR>
<TR><TD>EQ {T(0), 0 Kint(2)} {T(0)}</TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 10 | 1 .. '9' == 27

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      10
     |
      --[binary expr start] any
       1
      ..
       '9'
      --[binary expr end]
     --[binary expr end]
    ==
     27
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      10
     |
      --[binary expr start] any
       1
      ..
       '9'
      --[binary expr end]
     --[binary expr end]
    ==
     27
    --[binary expr end]
end
define Proc%1
L0 (entry)
	CONCAT {1 Kint(1), '9' Ks(0)} {T(0)}
	BOR {10 Kint(0), T(0)} {T(0)}
	EQ {T(0), 27 Kint(2)} {T(0)}
	RET {T(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>CONCAT {1 Kint(1), '9' Ks(0)} {T(0)}</TD></TR>
<TR><TD>BOR {10 Kint(0), T(0)} {T(0)}</TD></TR>
<TR><TD>EQ {T(0), 27 Kint(2)} {T(0)}</TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 0xF0 | 0xCC ~ 0xAA & 0xFD == 0xF4

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      240
     |
      --[binary expr start] any
       204
      ~
       --[binary expr start] any
        170
       &
        253
       --[binary expr end]
      --[binary expr end]
     --[binary expr end]
    ==
     244
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] boolean
     --[binary expr start] integer
      240
     |
      --[binary expr start] integer
       204
      ~
       --[binary expr start] integer
        170
       &
        253
       --[binary expr end]
      --[binary expr end]
     --[binary expr end]
    ==
     244
    --[binary expr end]
end
define Proc%1
L0 (entry)
	BANDii {170 Kint(2), 253 Kint(3)} {Tint(0)}
	BXORii {204 Kint(1), Tint(0)} {Tint(0)}
	BORii {240 Kint(0), Tint(0)} {Tint(0)}
	EQii {Tint(0), 244 Kint(4)} {Tbool(0)}
	RET {Tbool(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>BANDii {170 Kint(2), 253 Kint(3)} {Tint(0)}</TD></TR>
<TR><TD>BXORii {204 Kint(1), Tint(0)} {Tint(0)}</TD></TR>
<TR><TD>BORii {240 Kint(0), Tint(0)} {Tint(0)}</TD></TR>
<TR><TD>EQii {Tint(0), 244 Kint(4)} {Tbool(0)}</TD></TR>
<TR><TD>RET {Tbool(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 0xFD & 0xAA ~ 0xCC | 0xF0 == 0xF4

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       --[binary expr start] any
        253
       &
        170
       --[binary expr end]
      ~
       204
      --[binary expr end]
     |
      240
     --[binary expr end]
    ==
     244
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] boolean
     --[binary expr start] integer
      --[binary expr start] integer
       --[binary expr start] integer
        253
       &
        170
       --[binary expr end]
      ~
       204
      --[binary expr end]
     |
      240
     --[binary expr end]
    ==
     244
    --[binary expr end]
end
define Proc%1
L0 (entry)
	BANDii {253 Kint(0), 170 Kint(1)} {Tint(0)}
	BXORii {Tint(0), 204 Kint(2)} {Tint(0)}
	BORii {Tint(0), 240 Kint(3)} {Tint(0)}
	EQii {Tint(0), 244 Kint(4)} {Tbool(0)}
	RET {Tbool(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>BANDii {253 Kint(0), 170 Kint(1)} {Tint(0)}</TD></TR>
<TR><TD>BXORii {Tint(0), 204 Kint(2)} {Tint(0)}</TD></TR>
<TR><TD>BORii {Tint(0), 240 Kint(3)} {Tint(0)}</TD></TR>
<TR><TD>EQii {Tint(0), 244 Kint(4)} {Tbool(0)}</TD></TR>
<TR><TD>RET {Tbool(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 0xF0 & 0x0F + 1 == 0x10

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      240
     &
      --[binary expr start] any
       15
      +
       1
      --[binary expr end]
     --[binary expr end]
    ==
     16
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] boolean
     --[binary expr start] integer
      240
     &
      --[binary expr start] integer
       15
      +
       1
      --[binary expr end]
     --[binary expr end]
    ==
     16
    --[binary expr end]
end
define Proc%1
L0 (entry)
	ADDii {15 Kint(1), 1 Kint(2)} {Tint(0)}
	BANDii {240 Kint(0), Tint(0)} {Tint(0)}
	EQii {Tint(0), 16 Kint(3)} {Tbool(0)}
	RET {Tbool(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>ADDii {15 Kint(1), 1 Kint(2)} {Tint(0)}</TD></TR>
<TR><TD>BANDii {240 Kint(0), Tint(0)} {Tint(0)}</TD></TR>
<TR><TD>EQii {Tint(0), 16 Kint(3)} {Tbool(0)}</TD></TR>
<TR><TD>RET {Tbool(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 3^4//2^3//5 == 2

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       --[binary expr start] any
        3
       ^
        4
       --[binary expr end]
      //
       --[binary expr start] any
        2
       ^
        3
       --[binary expr end]
      --[binary expr end]
     //
      5
     --[binary expr end]
    ==
     2
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       --[binary expr start] number
        3
       ^
        4
       --[binary expr end]
      //
       --[binary expr start] number
        2
       ^
        3
       --[binary expr end]
      --[binary expr end]
     //
      5
     --[binary expr end]
    ==
     2
    --[binary expr end]
end
define Proc%1
L0 (entry)
	POW {3 Kint(0), 4 Kint(1)} {Tflt(0)}
	POW {2 Kint(2), 3 Kint(0)} {Tflt(1)}
	IDIV {Tflt(0), Tflt(1)} {T(0)}
	IDIV {T(0), 5 Kint(3)} {T(0)}
	EQ {T(0), 2 Kint(2)} {T(0)}
	RET {T(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>POW {3 Kint(0), 4 Kint(1)} {Tflt(0)}</TD></TR>
<TR><TD>POW {2 Kint(2), 3 Kint(0)} {Tflt(1)}</TD></TR>
<TR><TD>IDIV {Tflt(0), Tflt(1)} {T(0)}</TD></TR>
<TR><TD>IDIV {T(0), 5 Kint(3)} {T(0)}</TD></TR>
<TR><TD>EQ {T(0), 2 Kint(2)} {T(0)}</TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return not ((true or false) and nil)

function()
--upvalues  _ENV*
  return
    --[unary expr start] any
    not
     --[suffixed expr start] any
      --[primary start] any
       --[binary expr start] any
        --[suffixed expr start] any
         --[primary start] any
          --[binary expr start] any
           true
          or
           false
          --[binary expr end]
         --[primary end]
        --[suffixed expr end]
       and
        nil
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    --[unary expr end]
end
function()
--upvalues  _ENV*
  return
    --[unary expr start] any
    not
     --[suffixed expr start] any
      --[primary start] any
       --[binary expr start] any
        --[suffixed expr start] any
         --[primary start] any
          --[binary expr start] any
           true
          or
           false
          --[binary expr end]
         --[primary end]
        --[suffixed expr end]
       and
        nil
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    --[unary expr end]
end
define Proc%1
L0 (entry)
	MOV {true} {T(1)}
	CBR {T(1)} {L5, L4}
L1 (exit)
L2
	MOV {nil} {T(0)}
	BR {L3}
L3
	NOT {T(0)} {T(0)}
	RET {T(0)} {L1}
L4
	MOV {false} {T(1)}
	BR {L5}
L5
	MOV {T(1)} {T(0)}
	CBR {T(0)} {L2, L3}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>MOV {true} {T(1)}</TD></TR>
<TR><TD>CBR {T(1)} {L5, L4}</TD></TR>
</TABLE>>];
L0 -> L5
L0 -> L4
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>MOV {nil} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L2 -> L3
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>NOT {T(0)} {T(0)}</TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
L4 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L4</B></TD></TR>
<TR><TD>MOV {false} {T(1)}</TD></TR>
<TR><TD>BR {L5}</TD></TR>
</TABLE>>];
L4 -> L5
L5 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L5</B></TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L2, L3}</TD></TR>
</TABLE>>];
L5 -> L2
L5 -> L3
}
return true or false and nil

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     true
    or
     --[binary expr start] any
      false
     and
      nil
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     true
    or
     --[binary expr start] any
      false
     and
      nil
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	MOV {true} {T(0)}
	CBR {T(0)} {L3, L2}
L1 (exit)
L2
	MOV {false} {T(1)}
	CBR {T(1)} {L4, L5}
L3
	RET {T(0)} {L1}
L4
	MOV {nil} {T(1)}
	BR {L5}
L5
	MOV {T(1)} {T(0)}
	BR {L3}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>MOV {true} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L3, L2}</TD></TR>
</TABLE>>];
L0 -> L3
L0 -> L2
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>MOV {false} {T(1)}</TD></TR>
<TR><TD>CBR {T(1)} {L4, L5}</TD></TR>
</TABLE>>];
L2 -> L4
L2 -> L5
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
L4 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L4</B></TD></TR>
<TR><TD>MOV {nil} {T(1)}</TD></TR>
<TR><TD>BR {L5}</TD></TR>
</TABLE>>];
L4 -> L5
L5 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L5</B></TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L5 -> L3
}
return (((1 or false) and true) or false) == true

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[suffixed expr start] any
      --[primary start] any
       --[binary expr start] any
        --[suffixed expr start] any
         --[primary start] any
          --[binary expr start] any
           --[suffixed expr start] any
            --[primary start] any
             --[binary expr start] any
              1
             or
              false
             --[binary expr end]
            --[primary end]
           --[suffixed expr end]
          and
           true
          --[binary expr end]
         --[primary end]
        --[suffixed expr end]
       or
        false
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    ==
     true
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[suffixed expr start] any
      --[primary start] any
       --[binary expr start] any
        --[suffixed expr start] any
         --[primary start] any
          --[binary expr start] any
           --[suffixed expr start] any
            --[primary start] any
             --[binary expr start] any
              1
             or
              false
             --[binary expr end]
            --[primary end]
           --[suffixed expr end]
          and
           true
          --[binary expr end]
         --[primary end]
        --[suffixed expr end]
       or
        false
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    ==
     true
    --[binary expr end]
end
define Proc%1
L0 (entry)
	MOV {1 Kint(0)} {T(2)}
	CBR {T(2)} {L7, L6}
L1 (exit)
L2
	MOV {false} {T(0)}
	BR {L3}
L3
	EQ {T(0), true} {T(0)}
	RET {T(0)} {L1}
L4
	MOV {true} {T(1)}
	BR {L5}
L5
	MOV {T(1)} {T(0)}
	CBR {T(0)} {L3, L2}
L6
	MOV {false} {T(2)}
	BR {L7}
L7
	MOV {T(2)} {T(1)}
	CBR {T(1)} {L4, L5}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>MOV {1 Kint(0)} {T(2)}</TD></TR>
<TR><TD>CBR {T(2)} {L7, L6}</TD></TR>
</TABLE>>];
L0 -> L7
L0 -> L6
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>MOV {false} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L2 -> L3
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>EQ {T(0), true} {T(0)}</TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
L4 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L4</B></TD></TR>
<TR><TD>MOV {true} {T(1)}</TD></TR>
<TR><TD>BR {L5}</TD></TR>
</TABLE>>];
L4 -> L5
L5 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L5</B></TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L3, L2}</TD></TR>
</TABLE>>];
L5 -> L3
L5 -> L2
L6 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L6</B></TD></TR>
<TR><TD>MOV {false} {T(2)}</TD></TR>
<TR><TD>BR {L7}</TD></TR>
</TABLE>>];
L6 -> L7
L7 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L7</B></TD></TR>
<TR><TD>MOV {T(2)} {T(1)}</TD></TR>
<TR><TD>CBR {T(1)} {L4, L5}</TD></TR>
</TABLE>>];
L7 -> L4
L7 -> L5
}
return (((nil and true) or false) and true) == false

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[suffixed expr start] any
      --[primary start] any
       --[binary expr start] any
        --[suffixed expr start] any
         --[primary start] any
          --[binary expr start] any
           --[suffixed expr start] any
            --[primary start] any
             --[binary expr start] any
              nil
             and
              true
             --[binary expr end]
            --[primary end]
           --[suffixed expr end]
          or
           false
          --[binary expr end]
         --[primary end]
        --[suffixed expr end]
       and
        true
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    ==
     false
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[suffixed expr start] any
      --[primary start] any
       --[binary expr start] any
        --[suffixed expr start] any
         --[primary start] any
          --[binary expr start] any
           --[suffixed expr start] any
            --[primary start] any
             --[binary expr start] any
              nil
             and
              true
             --[binary expr end]
            --[primary end]
           --[suffixed expr end]
          or
           false
          --[binary expr end]
         --[primary end]
        --[suffixed expr end]
       and
        true
       --[binary expr end]
      --[primary end]
     --[suffixed expr end]
    ==
     false
    --[binary expr end]
end
define Proc%1
L0 (entry)
	MOV {nil} {T(2)}
	CBR {T(2)} {L6, L7}
L1 (exit)
L2
	MOV {true} {T(0)}
	BR {L3}
L3
	EQ {T(0), false} {T(0)}
	RET {T(0)} {L1}
L4
	MOV {false} {T(1)}
	BR {L5}
L5
	MOV {T(1)} {T(0)}
	CBR {T(0)} {L2, L3}
L6
	MOV {true} {T(2)}
	BR {L7}
L7
	MOV {T(2)} {T(1)}
	CBR {T(1)} {L5, L4}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>MOV {nil} {T(2)}</TD></TR>
<TR><TD>CBR {T(2)} {L6, L7}</TD></TR>
</TABLE>>];
L0 -> L6
L0 -> L7
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>MOV {true} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L2 -> L3
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>EQ {T(0), false} {T(0)}</TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
L4 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L4</B></TD></TR>
<TR><TD>MOV {false} {T(1)}</TD></TR>
<TR><TD>BR {L5}</TD></TR>
</TABLE>>];
L4 -> L5
L5 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L5</B></TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L2, L3}</TD></TR>
</TABLE>>];
L5 -> L2
L5 -> L3
L6 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L6</B></TD></TR>
<TR><TD>MOV {true} {T(2)}</TD></TR>
<TR><TD>BR {L7}</TD></TR>
</TABLE>>];
L6 -> L7
L7 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L7</B></TD></TR>
<TR><TD>MOV {T(2)} {T(1)}</TD></TR>
<TR><TD>CBR {T(1)} {L5, L4}</TD></TR>
</TABLE>>];
L7 -> L5
L7 -> L4
}
return -(1 or 2) == -1 and (1 and 2)+(-1.25 or -4) == 0.75

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[unary expr start] any
      -
       --[suffixed expr start] any
        --[primary start] any
         --[binary expr start] any
          1
         or
          2
         --[binary expr end]
        --[primary end]
       --[suffixed expr end]
      --[unary expr end]
     ==
      --[unary expr start] any
      -
       1
      --[unary expr end]
     --[binary expr end]
    and
     --[binary expr start] any
      --[binary expr start] any
       --[suffixed expr start] any
        --[primary start] any
         --[binary expr start] any
          1
         and
          2
         --[binary expr end]
        --[primary end]
       --[suffixed expr end]
      +
       --[suffixed expr start] any
        --[primary start] any
         --[binary expr start] any
          --[unary expr start] any
          -
           1.2500000000000000
          --[unary expr end]
         or
          --[unary expr start] any
          -
           4
          --[unary expr end]
         --[binary expr end]
        --[primary end]
       --[suffixed expr end]
      --[binary expr end]
     ==
      0.7500000000000000
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[unary expr start] any
      -
       --[suffixed expr start] any
        --[primary start] any
         --[binary expr start] any
          1
         or
          2
         --[binary expr end]
        --[primary end]
       --[suffixed expr end]
      --[unary expr end]
     ==
      --[unary expr start] integer
      -
       1
      --[unary expr end]
     --[binary expr end]
    and
     --[binary expr start] any
      --[binary expr start] any
       --[suffixed expr start] any
        --[primary start] any
         --[binary expr start] any
          1
         and
          2
         --[binary expr end]
        --[primary end]
       --[suffixed expr end]
      +
       --[suffixed expr start] any
        --[primary start] any
         --[binary expr start] any
          --[unary expr start] number
          -
           1.2500000000000000
          --[unary expr end]
         or
          --[unary expr start] integer
          -
           4
          --[unary expr end]
         --[binary expr end]
        --[primary end]
       --[suffixed expr end]
      --[binary expr end]
     ==
      0.7500000000000000
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	MOV {1 Kint(0)} {T(1)}
	CBR {T(1)} {L5, L4}
L1 (exit)
L2
	MOV {1 Kint(0)} {T(1)}
	CBR {T(1)} {L6, L7}
L3
	RET {T(0)} {L1}
L4
	MOV {2 Kint(1)} {T(1)}
	BR {L5}
L5
	UNM {T(1)} {T(1)}
	UNMi {1 Kint(0)} {Tint(0)}
	EQ {T(1), Tint(0)} {T(1)}
	MOV {T(1)} {T(0)}
	CBR {T(0)} {L2, L3}
L6
	MOV {2 Kint(1)} {T(1)}
	BR {L7}
L7
	UNMf {1.25E0 Kflt(0)} {Tflt(0)}
	MOV {Tflt(0)} {T(2)}
	CBR {T(2)} {L9, L8}
L8
	UNMi {4 Kint(2)} {Tint(0)}
	MOV {Tint(0)} {T(2)}
	BR {L9}
L9
	ADD {T(1), T(2)} {T(1)}
	EQ {T(1), 7.5E-1 Kflt(1)} {T(1)}
	MOV {T(1)} {T(0)}
	BR {L3}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>MOV {1 Kint(0)} {T(1)}</TD></TR>
<TR><TD>CBR {T(1)} {L5, L4}</TD></TR>
</TABLE>>];
L0 -> L5
L0 -> L4
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>MOV {1 Kint(0)} {T(1)}</TD></TR>
<TR><TD>CBR {T(1)} {L6, L7}</TD></TR>
</TABLE>>];
L2 -> L6
L2 -> L7
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
L4 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L4</B></TD></TR>
<TR><TD>MOV {2 Kint(1)} {T(1)}</TD></TR>
<TR><TD>BR {L5}</TD></TR>
</TABLE>>];
L4 -> L5
L5 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L5</B></TD></TR>
<TR><TD>UNM {T(1)} {T(1)}</TD></TR>
<TR><TD>UNMi {1 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>EQ {T(1), Tint(0)} {T(1)}</TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L2, L3}</TD></TR>
</TABLE>>];
L5 -> L2
L5 -> L3
L6 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L6</B></TD></TR>
<TR><TD>MOV {2 Kint(1)} {T(1)}</TD></TR>
<TR><TD>BR {L7}</TD></TR>
</TABLE>>];
L6 -> L7
L7 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L7</B></TD></TR>
<TR><TD>UNMf {1.25E0 Kflt(0)} {Tflt(0)}</TD></TR>
<TR><TD>MOV {Tflt(0)} {T(2)}</TD></TR>
<TR><TD>CBR {T(2)} {L9, L8}</TD></TR>
</TABLE>>];
L7 -> L9
L7 -> L8
L8 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L8</B></TD></TR>
<TR><TD>UNMi {4 Kint(2)} {Tint(0)}</TD></TR>
<TR><TD>MOV {Tint(0)} {T(2)}</TD></TR>
<TR><TD>BR {L9}</TD></TR>
</TABLE>>];
L8 -> L9
L9 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L9</B></TD></TR>
<TR><TD>ADD {T(1), T(2)} {T(1)}</TD></TR>
<TR><TD>EQ {T(1), 7.5E-1 Kflt(1)} {T(1)}</TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L9 -> L3
}
return ((2<3) or 1) == true and (2<3 and 4) == 4

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[suffixed expr start] any
       --[primary start] any
        --[binary expr start] any
         --[suffixed expr start] any
          --[primary start] any
           --[binary expr start] any
            2
           <
            3
           --[binary expr end]
          --[primary end]
         --[suffixed expr end]
        or
         1
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     ==
      true
     --[binary expr end]
    and
     --[binary expr start] any
      --[suffixed expr start] any
       --[primary start] any
        --[binary expr start] any
         --[binary expr start] any
          2
         <
          3
         --[binary expr end]
        and
         4
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     ==
      4
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[suffixed expr start] any
       --[primary start] any
        --[binary expr start] any
         --[suffixed expr start] boolean
          --[primary start] boolean
           --[binary expr start] boolean
            2
           <
            3
           --[binary expr end]
          --[primary end]
         --[suffixed expr end]
        or
         1
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     ==
      true
     --[binary expr end]
    and
     --[binary expr start] any
      --[suffixed expr start] any
       --[primary start] any
        --[binary expr start] any
         --[binary expr start] boolean
          2
         <
          3
         --[binary expr end]
        and
         4
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     ==
      4
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	LIii {2 Kint(0), 3 Kint(1)} {Tbool(0)}
	MOV {Tbool(0)} {T(1)}
	CBR {T(1)} {L5, L4}
L1 (exit)
L2
	LIii {2 Kint(0), 3 Kint(1)} {Tbool(0)}
	MOV {Tbool(0)} {T(1)}
	CBR {T(1)} {L6, L7}
L3
	RET {T(0)} {L1}
L4
	MOV {1 Kint(2)} {T(1)}
	BR {L5}
L5
	EQ {T(1), true} {T(1)}
	MOV {T(1)} {T(0)}
	CBR {T(0)} {L2, L3}
L6
	MOV {4 Kint(3)} {T(1)}
	BR {L7}
L7
	EQ {T(1), 4 Kint(3)} {T(1)}
	MOV {T(1)} {T(0)}
	BR {L3}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>LIii {2 Kint(0), 3 Kint(1)} {Tbool(0)}</TD></TR>
<TR><TD>MOV {Tbool(0)} {T(1)}</TD></TR>
<TR><TD>CBR {T(1)} {L5, L4}</TD></TR>
</TABLE>>];
L0 -> L5
L0 -> L4
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>LIii {2 Kint(0), 3 Kint(1)} {Tbool(0)}</TD></TR>
<TR><TD>MOV {Tbool(0)} {T(1)}</TD></TR>
<TR><TD>CBR {T(1)} {L6, L7}</TD></TR>
</TABLE>>];
L2 -> L6
L2 -> L7
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
L4 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L4</B></TD></TR>
<TR><TD>MOV {1 Kint(2)} {T(1)}</TD></TR>
<TR><TD>BR {L5}</TD></TR>
</TABLE>>];
L4 -> L5
L5 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L5</B></TD></TR>
<TR><TD>EQ {T(1), true} {T(1)}</TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L2, L3}</TD></TR>
</TABLE>>];
L5 -> L2
L5 -> L3
L6 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L6</B></TD></TR>
<TR><TD>MOV {4 Kint(3)} {T(1)}</TD></TR>
<TR><TD>BR {L7}</TD></TR>
</TABLE>>];
L6 -> L7
L7 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L7</B></TD></TR>
<TR><TD>EQ {T(1), 4 Kint(3)} {T(1)}</TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L7 -> L3
}
return (x>y) and x or y == 2

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[suffixed expr start] any
       --[primary start] any
        --[binary expr start] any
         --[suffixed expr start] any
          --[primary start] any
            x --global symbol any 
          --[primary end]
         --[suffixed expr end]
        >
         --[suffixed expr start] any
          --[primary start] any
            y --global symbol any 
          --[primary end]
         --[suffixed expr end]
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     and
      --[suffixed expr start] any
       --[primary start] any
         x --global symbol any 
       --[primary end]
      --[suffixed expr end]
     --[binary expr end]
    or
     --[binary expr start] any
      --[suffixed expr start] any
       --[primary start] any
         y --global symbol any 
       --[primary end]
      --[suffixed expr end]
     ==
      2
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[suffixed expr start] any
       --[primary start] any
        --[binary expr start] any
         --[suffixed expr start] any
          --[primary start] any
            x --global symbol any 
          --[primary end]
         --[suffixed expr end]
        >
         --[suffixed expr start] any
          --[primary start] any
            y --global symbol any 
          --[primary end]
         --[suffixed expr end]
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     and
      --[suffixed expr start] any
       --[primary start] any
         x --global symbol any 
       --[primary end]
      --[suffixed expr end]
     --[binary expr end]
    or
     --[binary expr start] any
      --[suffixed expr start] any
       --[primary start] any
         y --global symbol any 
       --[primary end]
      --[suffixed expr end]
     ==
      2
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	LOADGLOBAL {Upval(_ENV), 'x' Ks(0)} {T(2)}
	LOADGLOBAL {Upval(_ENV), 'y' Ks(1)} {T(3)}
	LT {T(3), T(2)} {T(2)}
	MOV {T(2)} {T(1)}
	CBR {T(1)} {L4, L5}
L1 (exit)
L2
	LOADGLOBAL {Upval(_ENV), 'y' Ks(1)} {T(1)}
	EQ {T(1), 2 Kint(0)} {T(1)}
	MOV {T(1)} {T(0)}
	BR {L3}
L3
	RET {T(0)} {L1}
L4
	LOADGLOBAL {Upval(_ENV), 'x' Ks(0)} {T(2)}
	MOV {T(2)} {T(1)}
	BR {L5}
L5
	MOV {T(1)} {T(0)}
	CBR {T(0)} {L3, L2}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'x' Ks(0)} {T(2)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'y' Ks(1)} {T(3)}</TD></TR>
<TR><TD>LT {T(3), T(2)} {T(2)}</TD></TR>
<TR><TD>MOV {T(2)} {T(1)}</TD></TR>
<TR><TD>CBR {T(1)} {L4, L5}</TD></TR>
</TABLE>>];
L0 -> L4
L0 -> L5
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'y' Ks(1)} {T(1)}</TD></TR>
<TR><TD>EQ {T(1), 2 Kint(0)} {T(1)}</TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L2 -> L3
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
L4 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L4</B></TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'x' Ks(0)} {T(2)}</TD></TR>
<TR><TD>MOV {T(2)} {T(1)}</TD></TR>
<TR><TD>BR {L5}</TD></TR>
</TABLE>>];
L4 -> L5
L5 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L5</B></TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L3, L2}</TD></TR>
</TABLE>>];
L5 -> L3
L5 -> L2
}
return {1,2,3}

function()
--upvalues  _ENV*
  return
    { --[table constructor start] table
      --[indexed assign start] integer
      --[value start]
       1
      --[value end]
      --[indexed assign end]
     ,
      --[indexed assign start] integer
      --[value start]
       2
      --[value end]
      --[indexed assign end]
     ,
      --[indexed assign start] integer
      --[value start]
       3
      --[value end]
      --[indexed assign end]
    } --[table constructor end]
end
function()
--upvalues  _ENV*
  return
    { --[table constructor start] table
      --[indexed assign start] integer
      --[value start]
       1
      --[value end]
      --[indexed assign end]
     ,
      --[indexed assign start] integer
      --[value start]
       2
      --[value end]
      --[indexed assign end]
     ,
      --[indexed assign start] integer
      --[value start]
       3
      --[value end]
      --[indexed assign end]
    } --[table constructor end]
end
define Proc%1
L0 (entry)
	NEWTABLE {T(0)}
	TPUTik {1 Kint(0)} {T(0), 1 Kint(0)}
	TPUTik {2 Kint(1)} {T(0), 2 Kint(1)}
	TPUTik {3 Kint(2)} {T(0), 3 Kint(2)}
	RET {T(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>NEWTABLE {T(0)}</TD></TR>
<TR><TD>TPUTik {1 Kint(0)} {T(0), 1 Kint(0)}</TD></TR>
<TR><TD>TPUTik {2 Kint(1)} {T(0), 2 Kint(1)}</TD></TR>
<TR><TD>TPUTik {3 Kint(2)} {T(0), 3 Kint(2)}</TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return 1 and 2

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     1
    and
     2
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     1
    and
     2
    --[binary expr end]
end
define Proc%1
L0 (entry)
	MOV {1 Kint(0)} {T(0)}
	CBR {T(0)} {L2, L3}
L1 (exit)
L2
	MOV {2 Kint(1)} {T(0)}
	BR {L3}
L3
	RET {T(0)} {L1}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>MOV {1 Kint(0)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L2, L3}</TD></TR>
</TABLE>>];
L0 -> L2
L0 -> L3
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>MOV {2 Kint(1)} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L2 -> L3
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
}
return 3 and 4 and 5

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      3
     and
      4
     --[binary expr end]
    and
     5
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      3
     and
      4
     --[binary expr end]
    and
     5
    --[binary expr end]
end
define Proc%1
L0 (entry)
	MOV {3 Kint(0)} {T(1)}
	CBR {T(1)} {L4, L5}
L1 (exit)
L2
	MOV {5 Kint(2)} {T(0)}
	BR {L3}
L3
	RET {T(0)} {L1}
L4
	MOV {4 Kint(1)} {T(1)}
	BR {L5}
L5
	MOV {T(1)} {T(0)}
	CBR {T(0)} {L2, L3}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>MOV {3 Kint(0)} {T(1)}</TD></TR>
<TR><TD>CBR {T(1)} {L4, L5}</TD></TR>
</TABLE>>];
L0 -> L4
L0 -> L5
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>MOV {5 Kint(2)} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L2 -> L3
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
L4 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L4</B></TD></TR>
<TR><TD>MOV {4 Kint(1)} {T(1)}</TD></TR>
<TR><TD>BR {L5}</TD></TR>
</TABLE>>];
L4 -> L5
L5 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L5</B></TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L2, L3}</TD></TR>
</TABLE>>];
L5 -> L2
L5 -> L3
}
return 1 or 2

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     1
    or
     2
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     1
    or
     2
    --[binary expr end]
end
define Proc%1
L0 (entry)
	MOV {1 Kint(0)} {T(0)}
	CBR {T(0)} {L3, L2}
L1 (exit)
L2
	MOV {2 Kint(1)} {T(0)}
	BR {L3}
L3
	RET {T(0)} {L1}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>MOV {1 Kint(0)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L3, L2}</TD></TR>
</TABLE>>];
L0 -> L3
L0 -> L2
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>MOV {2 Kint(1)} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L2 -> L3
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
}
return 3 or 4 or 5

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      3
     or
      4
     --[binary expr end]
    or
     5
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      3
     or
      4
     --[binary expr end]
    or
     5
    --[binary expr end]
end
define Proc%1
L0 (entry)
	MOV {3 Kint(0)} {T(1)}
	CBR {T(1)} {L5, L4}
L1 (exit)
L2
	MOV {5 Kint(2)} {T(0)}
	BR {L3}
L3
	RET {T(0)} {L1}
L4
	MOV {4 Kint(1)} {T(1)}
	BR {L5}
L5
	MOV {T(1)} {T(0)}
	CBR {T(0)} {L3, L2}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>MOV {3 Kint(0)} {T(1)}</TD></TR>
<TR><TD>CBR {T(1)} {L5, L4}</TD></TR>
</TABLE>>];
L0 -> L5
L0 -> L4
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>MOV {5 Kint(2)} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L2 -> L3
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
L4 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L4</B></TD></TR>
<TR><TD>MOV {4 Kint(1)} {T(1)}</TD></TR>
<TR><TD>BR {L5}</TD></TR>
</TABLE>>];
L4 -> L5
L5 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L5</B></TD></TR>
<TR><TD>MOV {T(1)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L3, L2}</TD></TR>
</TABLE>>];
L5 -> L3
L5 -> L2
}
return -3+4*5//2^3^2//9+4%10/3 == (-3)+(((4*5)//(2^(3^2)))//9)+((4%10)/3)

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       --[unary expr start] any
       -
        3
       --[unary expr end]
      +
       --[binary expr start] any
        --[binary expr start] any
         --[binary expr start] any
          4
         *
          5
         --[binary expr end]
        //
         --[binary expr start] any
          2
         ^
          --[binary expr start] any
           3
          ^
           2
          --[binary expr end]
         --[binary expr end]
        --[binary expr end]
       //
        9
       --[binary expr end]
      --[binary expr end]
     +
      --[binary expr start] any
       --[binary expr start] any
        4
       %
        10
       --[binary expr end]
      /
       3
      --[binary expr end]
     --[binary expr end]
    ==
     --[binary expr start] any
      --[binary expr start] any
       --[suffixed expr start] any
        --[primary start] any
         --[unary expr start] any
         -
          3
         --[unary expr end]
        --[primary end]
       --[suffixed expr end]
      +
       --[suffixed expr start] any
        --[primary start] any
         --[binary expr start] any
          --[suffixed expr start] any
           --[primary start] any
            --[binary expr start] any
             --[suffixed expr start] any
              --[primary start] any
               --[binary expr start] any
                4
               *
                5
               --[binary expr end]
              --[primary end]
             --[suffixed expr end]
            //
             --[suffixed expr start] any
              --[primary start] any
               --[binary expr start] any
                2
               ^
                --[suffixed expr start] any
                 --[primary start] any
                  --[binary expr start] any
                   3
                  ^
                   2
                  --[binary expr end]
                 --[primary end]
                --[suffixed expr end]
               --[binary expr end]
              --[primary end]
             --[suffixed expr end]
            --[binary expr end]
           --[primary end]
          --[suffixed expr end]
         //
          9
         --[binary expr end]
        --[primary end]
       --[suffixed expr end]
      --[binary expr end]
     +
      --[suffixed expr start] any
       --[primary start] any
        --[binary expr start] any
         --[suffixed expr start] any
          --[primary start] any
           --[binary expr start] any
            4
           %
            10
           --[binary expr end]
          --[primary end]
         --[suffixed expr end]
        /
         3
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       --[unary expr start] integer
       -
        3
       --[unary expr end]
      +
       --[binary expr start] any
        --[binary expr start] any
         --[binary expr start] integer
          4
         *
          5
         --[binary expr end]
        //
         --[binary expr start] number
          2
         ^
          --[binary expr start] number
           3
          ^
           2
          --[binary expr end]
         --[binary expr end]
        --[binary expr end]
       //
        9
       --[binary expr end]
      --[binary expr end]
     +
      --[binary expr start] number
       --[binary expr start] integer
        4
       %
        10
       --[binary expr end]
      /
       3
      --[binary expr end]
     --[binary expr end]
    ==
     --[binary expr start] any
      --[binary expr start] any
       --[suffixed expr start] integer
        --[primary start] integer
         --[unary expr start] integer
         -
          3
         --[unary expr end]
        --[primary end]
       --[suffixed expr end]
      +
       --[suffixed expr start] any
        --[primary start] any
         --[binary expr start] any
          --[suffixed expr start] any
           --[primary start] any
            --[binary expr start] any
             --[suffixed expr start] integer
              --[primary start] integer
               --[binary expr start] integer
                4
               *
                5
               --[binary expr end]
              --[primary end]
             --[suffixed expr end]
            //
             --[suffixed expr start] number
              --[primary start] number
               --[binary expr start] number
                2
               ^
                --[suffixed expr start] number
                 --[primary start] number
                  --[binary expr start] number
                   3
                  ^
                   2
                  --[binary expr end]
                 --[primary end]
                --[suffixed expr end]
               --[binary expr end]
              --[primary end]
             --[suffixed expr end]
            --[binary expr end]
           --[primary end]
          --[suffixed expr end]
         //
          9
         --[binary expr end]
        --[primary end]
       --[suffixed expr end]
      --[binary expr end]
     +
      --[suffixed expr start] number
       --[primary start] number
        --[binary expr start] number
         --[suffixed expr start] integer
          --[primary start] integer
           --[binary expr start] integer
            4
           %
            10
           --[binary expr end]
          --[primary end]
         --[suffixed expr end]
        /
         3
        --[binary expr end]
       --[primary end]
      --[suffixed expr end]
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	UNMi {3 Kint(0)} {Tint(0)}
	MULii {4 Kint(1), 5 Kint(2)} {Tint(1)}
	POW {3 Kint(0), 2 Kint(3)} {Tflt(0)}
	POW {2 Kint(3), Tflt(0)} {Tflt(0)}
	IDIV {Tint(1), Tflt(0)} {T(0)}
	IDIV {T(0), 9 Kint(4)} {T(0)}
	ADD {Tint(0), T(0)} {T(0)}
	MOD {4 Kint(1), 10 Kint(5)} {Tint(0)}
	DIVii {Tint(0), 3 Kint(0)} {Tflt(0)}
	ADD {T(0), Tflt(0)} {T(0)}
	UNMi {3 Kint(0)} {Tint(0)}
	MULii {4 Kint(1), 5 Kint(2)} {Tint(1)}
	POW {3 Kint(0), 2 Kint(3)} {Tflt(0)}
	POW {2 Kint(3), Tflt(0)} {Tflt(0)}
	IDIV {Tint(1), Tflt(0)} {T(1)}
	IDIV {T(1), 9 Kint(4)} {T(1)}
	ADD {Tint(0), T(1)} {T(1)}
	MOD {4 Kint(1), 10 Kint(5)} {Tint(0)}
	DIVii {Tint(0), 3 Kint(0)} {Tflt(0)}
	ADD {T(1), Tflt(0)} {T(1)}
	EQ {T(0), T(1)} {T(0)}
	RET {T(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>UNMi {3 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>MULii {4 Kint(1), 5 Kint(2)} {Tint(1)}</TD></TR>
<TR><TD>POW {3 Kint(0), 2 Kint(3)} {Tflt(0)}</TD></TR>
<TR><TD>POW {2 Kint(3), Tflt(0)} {Tflt(0)}</TD></TR>
<TR><TD>IDIV {Tint(1), Tflt(0)} {T(0)}</TD></TR>
<TR><TD>IDIV {T(0), 9 Kint(4)} {T(0)}</TD></TR>
<TR><TD>ADD {Tint(0), T(0)} {T(0)}</TD></TR>
<TR><TD>MOD {4 Kint(1), 10 Kint(5)} {Tint(0)}</TD></TR>
<TR><TD>DIVii {Tint(0), 3 Kint(0)} {Tflt(0)}</TD></TR>
<TR><TD>ADD {T(0), Tflt(0)} {T(0)}</TD></TR>
<TR><TD>UNMi {3 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>MULii {4 Kint(1), 5 Kint(2)} {Tint(1)}</TD></TR>
<TR><TD>POW {3 Kint(0), 2 Kint(3)} {Tflt(0)}</TD></TR>
<TR><TD>POW {2 Kint(3), Tflt(0)} {Tflt(0)}</TD></TR>
<TR><TD>IDIV {Tint(1), Tflt(0)} {T(1)}</TD></TR>
<TR><TD>IDIV {T(1), 9 Kint(4)} {T(1)}</TD></TR>
<TR><TD>ADD {Tint(0), T(1)} {T(1)}</TD></TR>
<TR><TD>MOD {4 Kint(1), 10 Kint(5)} {Tint(0)}</TD></TR>
<TR><TD>DIVii {Tint(0), 3 Kint(0)} {Tflt(0)}</TD></TR>
<TR><TD>ADD {T(1), Tflt(0)} {T(1)}</TD></TR>
<TR><TD>EQ {T(0), T(1)} {T(0)}</TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return -3%5 == 2 and -3+5 == 2

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       --[unary expr start] any
       -
        3
       --[unary expr end]
      %
       5
      --[binary expr end]
     ==
      2
     --[binary expr end]
    and
     --[binary expr start] any
      --[binary expr start] any
       --[unary expr start] any
       -
        3
       --[unary expr end]
      +
       5
      --[binary expr end]
     ==
      2
     --[binary expr end]
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] boolean
      --[binary expr start] integer
       --[unary expr start] integer
       -
        3
       --[unary expr end]
      %
       5
      --[binary expr end]
     ==
      2
     --[binary expr end]
    and
     --[binary expr start] boolean
      --[binary expr start] integer
       --[unary expr start] integer
       -
        3
       --[unary expr end]
      +
       5
      --[binary expr end]
     ==
      2
     --[binary expr end]
    --[binary expr end]
end
define Proc%1
L0 (entry)
	UNMi {3 Kint(0)} {Tint(0)}
	MOD {Tint(0), 5 Kint(1)} {Tint(0)}
	EQii {Tint(0), 2 Kint(2)} {Tbool(0)}
	MOV {Tbool(0)} {T(0)}
	CBR {T(0)} {L2, L3}
L1 (exit)
L2
	UNMi {3 Kint(0)} {Tint(0)}
	ADDii {Tint(0), 5 Kint(1)} {Tint(0)}
	EQii {Tint(0), 2 Kint(2)} {Tbool(0)}
	MOV {Tbool(0)} {T(0)}
	BR {L3}
L3
	RET {T(0)} {L1}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>UNMi {3 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>MOD {Tint(0), 5 Kint(1)} {Tint(0)}</TD></TR>
<TR><TD>EQii {Tint(0), 2 Kint(2)} {Tbool(0)}</TD></TR>
<TR><TD>MOV {Tbool(0)} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L2, L3}</TD></TR>
</TABLE>>];
L0 -> L2
L0 -> L3
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>UNMi {3 Kint(0)} {Tint(0)}</TD></TR>
<TR><TD>ADDii {Tint(0), 5 Kint(1)} {Tint(0)}</TD></TR>
<TR><TD>EQii {Tint(0), 2 Kint(2)} {Tbool(0)}</TD></TR>
<TR><TD>MOV {Tbool(0)} {T(0)}</TD></TR>
<TR><TD>BR {L3}</TD></TR>
</TABLE>>];
L2 -> L3
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L3 -> L1
}
return -((2.0^8 + -(-1)) % 8)/2 * 4 - 3

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       --[unary expr start] any
       -
        --[suffixed expr start] any
         --[primary start] any
          --[binary expr start] any
           --[suffixed expr start] any
            --[primary start] any
             --[binary expr start] any
              --[binary expr start] any
               2.0000000000000000
              ^
               8
              --[binary expr end]
             +
              --[unary expr start] any
              -
               --[suffixed expr start] any
                --[primary start] any
                 --[unary expr start] any
                 -
                  1
                 --[unary expr end]
                --[primary end]
               --[suffixed expr end]
              --[unary expr end]
             --[binary expr end]
            --[primary end]
           --[suffixed expr end]
          %
           8
          --[binary expr end]
         --[primary end]
        --[suffixed expr end]
       --[unary expr end]
      /
       2
      --[binary expr end]
     *
      4
     --[binary expr end]
    -
     3
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] number
     --[binary expr start] number
      --[binary expr start] number
       --[unary expr start] number
       -
        --[suffixed expr start] number
         --[primary start] number
          --[binary expr start] number
           --[suffixed expr start] number
            --[primary start] number
             --[binary expr start] number
              --[binary expr start] number
               2.0000000000000000
              ^
               8
              --[binary expr end]
             +
              --[unary expr start] integer
              -
               --[suffixed expr start] integer
                --[primary start] integer
                 --[unary expr start] integer
                 -
                  1
                 --[unary expr end]
                --[primary end]
               --[suffixed expr end]
              --[unary expr end]
             --[binary expr end]
            --[primary end]
           --[suffixed expr end]
          %
           8
          --[binary expr end]
         --[primary end]
        --[suffixed expr end]
       --[unary expr end]
      /
       2
      --[binary expr end]
     *
      4
     --[binary expr end]
    -
     3
    --[binary expr end]
end
define Proc%1
L0 (entry)
	POW {2E0 Kflt(0), 8 Kint(0)} {Tflt(0)}
	UNMi {1 Kint(1)} {Tint(0)}
	UNMi {Tint(0)} {Tint(0)}
	ADDfi {Tflt(0), Tint(0)} {Tflt(0)}
	MOD {Tflt(0), 8 Kint(0)} {Tflt(0)}
	UNMf {Tflt(0)} {Tflt(0)}
	DIVfi {Tflt(0), 2 Kint(2)} {Tflt(0)}
	MULfi {Tflt(0), 4 Kint(3)} {Tflt(0)}
	SUBfi {Tflt(0), 3 Kint(4)} {Tflt(0)}
	RET {Tflt(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>POW {2E0 Kflt(0), 8 Kint(0)} {Tflt(0)}</TD></TR>
<TR><TD>UNMi {1 Kint(1)} {Tint(0)}</TD></TR>
<TR><TD>UNMi {Tint(0)} {Tint(0)}</TD></TR>
<TR><TD>ADDfi {Tflt(0), Tint(0)} {Tflt(0)}</TD></TR>
<TR><TD>MOD {Tflt(0), 8 Kint(0)} {Tflt(0)}</TD></TR>
<TR><TD>UNMf {Tflt(0)} {Tflt(0)}</TD></TR>
<TR><TD>DIVfi {Tflt(0), 2 Kint(2)} {Tflt(0)}</TD></TR>
<TR><TD>MULfi {Tflt(0), 4 Kint(3)} {Tflt(0)}</TD></TR>
<TR><TD>SUBfi {Tflt(0), 3 Kint(4)} {Tflt(0)}</TD></TR>
<TR><TD>RET {Tflt(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return -((2^8 + -(-1)) % 8)//2 * 4 - 3

function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       --[unary expr start] any
       -
        --[suffixed expr start] any
         --[primary start] any
          --[binary expr start] any
           --[suffixed expr start] any
            --[primary start] any
             --[binary expr start] any
              --[binary expr start] any
               2
              ^
               8
              --[binary expr end]
             +
              --[unary expr start] any
              -
               --[suffixed expr start] any
                --[primary start] any
                 --[unary expr start] any
                 -
                  1
                 --[unary expr end]
                --[primary end]
               --[suffixed expr end]
              --[unary expr end]
             --[binary expr end]
            --[primary end]
           --[suffixed expr end]
          %
           8
          --[binary expr end]
         --[primary end]
        --[suffixed expr end]
       --[unary expr end]
      //
       2
      --[binary expr end]
     *
      4
     --[binary expr end]
    -
     3
    --[binary expr end]
end
function()
--upvalues  _ENV*
  return
    --[binary expr start] any
     --[binary expr start] any
      --[binary expr start] any
       --[unary expr start] number
       -
        --[suffixed expr start] number
         --[primary start] number
          --[binary expr start] number
           --[suffixed expr start] number
            --[primary start] number
             --[binary expr start] number
              --[binary expr start] number
               2
              ^
               8
              --[binary expr end]
             +
              --[unary expr start] integer
              -
               --[suffixed expr start] integer
                --[primary start] integer
                 --[unary expr start] integer
                 -
                  1
                 --[unary expr end]
                --[primary end]
               --[suffixed expr end]
              --[unary expr end]
             --[binary expr end]
            --[primary end]
           --[suffixed expr end]
          %
           8
          --[binary expr end]
         --[primary end]
        --[suffixed expr end]
       --[unary expr end]
      //
       2
      --[binary expr end]
     *
      4
     --[binary expr end]
    -
     3
    --[binary expr end]
end
define Proc%1
L0 (entry)
	POW {2 Kint(0), 8 Kint(1)} {Tflt(0)}
	UNMi {1 Kint(2)} {Tint(0)}
	UNMi {Tint(0)} {Tint(0)}
	ADDfi {Tflt(0), Tint(0)} {Tflt(0)}
	MOD {Tflt(0), 8 Kint(1)} {Tflt(0)}
	UNMf {Tflt(0)} {Tflt(0)}
	IDIV {Tflt(0), 2 Kint(0)} {T(0)}
	MUL {T(0), 4 Kint(3)} {T(0)}
	SUB {T(0), 3 Kint(4)} {T(0)}
	RET {T(0)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>POW {2 Kint(0), 8 Kint(1)} {Tflt(0)}</TD></TR>
<TR><TD>UNMi {1 Kint(2)} {Tint(0)}</TD></TR>
<TR><TD>UNMi {Tint(0)} {Tint(0)}</TD></TR>
<TR><TD>ADDfi {Tflt(0), Tint(0)} {Tflt(0)}</TD></TR>
<TR><TD>MOD {Tflt(0), 8 Kint(1)} {Tflt(0)}</TD></TR>
<TR><TD>UNMf {Tflt(0)} {Tflt(0)}</TD></TR>
<TR><TD>IDIV {Tflt(0), 2 Kint(0)} {T(0)}</TD></TR>
<TR><TD>MUL {T(0), 4 Kint(3)} {T(0)}</TD></TR>
<TR><TD>SUB {T(0), 3 Kint(4)} {T(0)}</TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return function ()
    (function () end){f()}
  end

function()
--upvalues  _ENV*
  return
    function()
    --upvalues  _ENV*
      --[expression statement start]
       --[expression list start]
         --[suffixed expr start] closure
          --[primary start] closure
           function()
           end
          --[primary end]
          --[suffix list start]
            --[function call start] any
             (
               { --[table constructor start] table
                 --[indexed assign start] any
                 --[value start]
                  --[suffixed expr start] any
                   --[primary start] any
                     f --global symbol any 
                   --[primary end]
                   --[suffix list start]
                     --[function call start] any
                      (
                      )
                     --[function call end]
                   --[suffix list end]
                  --[suffixed expr end]
                 --[value end]
                 --[indexed assign end]
               } --[table constructor end]
             )
            --[function call end]
          --[suffix list end]
         --[suffixed expr end]
       --[expression list end]
      --[expression statement end]
    end
end
function()
--upvalues  _ENV*
  return
    function()
    --upvalues  _ENV*
      --[expression statement start]
       --[expression list start]
         --[suffixed expr start] any
          --[primary start] closure
           function()
           end
          --[primary end]
          --[suffix list start]
            --[function call start] any
             (
               { --[table constructor start] table
                 --[indexed assign start] any
                 --[value start]
                  --[suffixed expr start] any
                   --[primary start] any
                     f --global symbol any 
                   --[primary end]
                   --[suffix list start]
                     --[function call start] any
                      (
                      )
                     --[function call end]
                   --[suffix list end]
                  --[suffixed expr end]
                 --[value end]
                 --[indexed assign end]
               } --[table constructor end]
             )
            --[function call end]
          --[suffix list end]
         --[suffixed expr end]
       --[expression list end]
      --[expression statement end]
    end
end
define Proc%1
L0 (entry)
	CLOSURE {Proc%2} {T(0)}
	RET {T(0)} {L1}
L1 (exit)
define Proc%2
L0 (entry)
	CLOSURE {Proc%3} {T(0)}
	NEWTABLE {T(1)}
	LOADGLOBAL {Upval(_ENV), 'f' Ks(0)} {T(2)}
	CALL {T(2)} {T(2..), -1 Kint(1)}
	TPUTik {T(2..)} {T(1), 1 Kint(0)}
	MOV {T(0)} {T(2)}
	CALL {T(2), T(1)} {T(2..), 1 Kint(0)}
	RET {L1}
L1 (exit)
define Proc%3
L0 (entry)
	RET {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>CLOSURE {Proc%2} {T(0)}</TD></TR>
<TR><TD>RET {T(0)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
digraph Proc2 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>CLOSURE {Proc%3} {T(0)}</TD></TR>
<TR><TD>NEWTABLE {T(1)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'f' Ks(0)} {T(2)}</TD></TR>
<TR><TD>CALL {T(2)} {T(2..), -1 Kint(1)}</TD></TR>
<TR><TD>TPUTik {T(2..)} {T(1), 1 Kint(0)}</TD></TR>
<TR><TD>MOV {T(0)} {T(2)}</TD></TR>
<TR><TD>CALL {T(2), T(1)} {T(2..), 1 Kint(0)}</TD></TR>
<TR><TD>RET {L1}</TD></TR>
</TABLE>>];
L0 -> L1
digraph Proc3 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>RET {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
digraph Proc3 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>RET {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
}
digraph Proc2 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>CLOSURE {Proc%3} {T(0)}</TD></TR>
<TR><TD>NEWTABLE {T(1)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'f' Ks(0)} {T(2)}</TD></TR>
<TR><TD>CALL {T(2)} {T(2..), -1 Kint(1)}</TD></TR>
<TR><TD>TPUTik {T(2..)} {T(1), 1 Kint(0)}</TD></TR>
<TR><TD>MOV {T(0)} {T(2)}</TD></TR>
<TR><TD>CALL {T(2), T(1)} {T(2..), 1 Kint(0)}</TD></TR>
<TR><TD>RET {L1}</TD></TR>
</TABLE>>];
L0 -> L1
digraph Proc3 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>RET {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
digraph Proc3 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>RET {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
}
}
return (f())

function()
--upvalues  _ENV*
  return
    --[suffixed expr start] any
     --[primary start] any
      --[suffixed expr start] any
       --[primary start] any
         f --global symbol any 
       --[primary end]
       --[suffix list start]
         --[function call start] any
          (
          )
         --[function call end]
       --[suffix list end]
      --[suffixed expr end]
     --[primary end]
    --[suffixed expr end]
end
function()
--upvalues  _ENV*
  return
    --[suffixed expr start] any
     --[primary start] any
      --[suffixed expr start] any
       --[primary start] any
         f --global symbol any 
       --[primary end]
       --[suffix list start]
         --[function call start] any
          (
          )
         --[function call end]
       --[suffix list end]
      --[suffixed expr end]
     --[primary end]
    --[suffixed expr end]
end
define Proc%1
L0 (entry)
	LOADGLOBAL {Upval(_ENV), 'f' Ks(0)} {T(0)}
	CALL {T(0)} {T(0..), -1 Kint(0)}
	RET {T(0[0..])} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'f' Ks(0)} {T(0)}</TD></TR>
<TR><TD>CALL {T(0)} {T(0..), -1 Kint(0)}</TD></TR>
<TR><TD>RET {T(0[0..])} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
return {g()}, f(g())
function()
--upvalues  _ENV*
  return
    { --[table constructor start] table
      --[indexed assign start] any
      --[value start]
       --[suffixed expr start] any
        --[primary start] any
          g --global symbol any 
        --[primary end]
        --[suffix list start]
          --[function call start] any
           (
           )
          --[function call end]
        --[suffix list end]
       --[suffixed expr end]
      --[value end]
      --[indexed assign end]
    } --[table constructor end]
   ,
    --[suffixed expr start] any
     --[primary start] any
       f --global symbol any 
     --[primary end]
     --[suffix list start]
       --[function call start] any
        (
          --[suffixed expr start] any
           --[primary start] any
             g --global symbol any 
           --[primary end]
           --[suffix list start]
             --[function call start] any
              (
              )
             --[function call end]
           --[suffix list end]
          --[suffixed expr end]
        )
       --[function call end]
     --[suffix list end]
    --[suffixed expr end]
end
function()
--upvalues  _ENV*
  return
    { --[table constructor start] table
      --[indexed assign start] any
      --[value start]
       --[suffixed expr start] any
        --[primary start] any
          g --global symbol any 
        --[primary end]
        --[suffix list start]
          --[function call start] any
           (
           )
          --[function call end]
        --[suffix list end]
       --[suffixed expr end]
      --[value end]
      --[indexed assign end]
    } --[table constructor end]
   ,
    --[suffixed expr start] any
     --[primary start] any
       f --global symbol any 
     --[primary end]
     --[suffix list start]
       --[function call start] any
        (
          --[suffixed expr start] any
           --[primary start] any
             g --global symbol any 
           --[primary end]
           --[suffix list start]
             --[function call start] any
              (
              )
             --[function call end]
           --[suffix list end]
          --[suffixed expr end]
        )
       --[function call end]
     --[suffix list end]
    --[suffixed expr end]
end
define Proc%1
L0 (entry)
	NEWTABLE {T(0)}
	LOADGLOBAL {Upval(_ENV), 'g' Ks(0)} {T(1)}
	CALL {T(1)} {T(1..), -1 Kint(1)}
	TPUTik {T(1..)} {T(0), 1 Kint(0)}
	LOADGLOBAL {Upval(_ENV), 'f' Ks(1)} {T(1)}
	LOADGLOBAL {Upval(_ENV), 'g' Ks(0)} {T(2)}
	CALL {T(2)} {T(2..), -1 Kint(1)}
	MOV {T(1)} {T(3)}
	CALL {T(3), T(2..)} {T(3..), -1 Kint(1)}
	RET {T(0), T(3..)} {L1}
L1 (exit)
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>NEWTABLE {T(0)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'g' Ks(0)} {T(1)}</TD></TR>
<TR><TD>CALL {T(1)} {T(1..), -1 Kint(1)}</TD></TR>
<TR><TD>TPUTik {T(1..)} {T(0), 1 Kint(0)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'f' Ks(1)} {T(1)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'g' Ks(0)} {T(2)}</TD></TR>
<TR><TD>CALL {T(2)} {T(2..), -1 Kint(1)}</TD></TR>
<TR><TD>MOV {T(1)} {T(3)}</TD></TR>
<TR><TD>CALL {T(3), T(2..)} {T(3..), -1 Kint(1)}</TD></TR>
<TR><TD>RET {T(0), T(3..)} {L1}</TD></TR>
</TABLE>>];
L0 -> L1
}
