for k,v in pairs(t) do
    print(k,v)
end

function()
--upvalues  _ENV*
  for
  --[local symbols] k, v
    k --local symbol any 
   ,
    v --local symbol any 
  in
    --[suffixed expr start] any
     --[primary start] any
       pairs --global symbol any 
     --[primary end]
     --[suffix list start]
       --[function call start] any
        (
          --[suffixed expr start] any
           --[primary start] any
             t --global symbol any 
           --[primary end]
          --[suffixed expr end]
        )
       --[function call end]
     --[suffix list end]
    --[suffixed expr end]
  do
     --[expression statement start]
      --[expression list start]
        --[suffixed expr start] any
         --[primary start] any
           print --global symbol any 
         --[primary end]
         --[suffix list start]
           --[function call start] any
            (
              --[suffixed expr start] any
               --[primary start] any
                 k --local symbol any 
               --[primary end]
              --[suffixed expr end]
             ,
              --[suffixed expr start] any
               --[primary start] any
                 v --local symbol any 
               --[primary end]
              --[suffixed expr end]
            )
           --[function call end]
         --[suffix list end]
        --[suffixed expr end]
      --[expression list end]
     --[expression statement end]
  end
end
function()
--upvalues  _ENV*
  do
  --[local symbols] (for_f), (for_s), (for_var)
    local
    --[symbols]
      (for_f) --local symbol any 
     ,
      (for_s) --local symbol any 
     ,
      (for_var) --local symbol any 
    --[expressions]
      --[suffixed expr start] any
       --[primary start] any
         pairs --global symbol any 
       --[primary end]
       --[suffix list start]
         --[function call start] any
          (
            --[suffixed expr start] any
             --[primary start] any
               t --global symbol any 
             --[primary end]
            --[suffixed expr end]
          )
         --[function call end]
       --[suffix list end]
      --[suffixed expr end]
    while
    --[local symbols] k, v
     true
    do
      local
      --[symbols]
        k --local symbol any 
       ,
        v --local symbol any 
      --[expressions]
        --[suffixed expr start] any
         --[primary start] any
           (for_f) --local symbol any 
         --[primary end]
         --[suffix list start]
           --[function call start] any
            (
               (for_s) --local symbol any 
             ,
               (for_var) --local symbol any 
            )
           --[function call end]
         --[suffix list end]
        --[suffixed expr end]
      if
       --[binary expr start] any
         k --local symbol any 
       ==
        nil
       --[binary expr end]
      then
        goto break
      end
      --[expression statement start]
       --[var list start]
          (for_var) --local symbol any 
       = --[var list end]
       --[expression list start]
          k --local symbol any 
       --[expression list end]
      --[expression statement end]
      --[expression statement start]
       --[expression list start]
         --[suffixed expr start] any
          --[primary start] any
            print --global symbol any 
          --[primary end]
          --[suffix list start]
            --[function call start] any
             (
               --[suffixed expr start] any
                --[primary start] any
                  k --local symbol any 
                --[primary end]
               --[suffixed expr end]
              ,
               --[suffixed expr start] any
                --[primary start] any
                  v --local symbol any 
                --[primary end]
               --[suffixed expr end]
             )
            --[function call end]
          --[suffix list end]
         --[suffixed expr end]
       --[expression list end]
      --[expression statement end]
    end
  end
end
define Proc%1
L0 (entry)
	LOADGLOBAL {Upval(_ENV), 'pairs' Ks(0)} {T(0)}
	LOADGLOBAL {Upval(_ENV), 't' Ks(1)} {T(1)}
	MOV {T(0)} {T(2)}
	CALL {T(2), T(1)} {T(2..), 3 Kint(0)}
	MOV {T(2[2..])} {local((for_f), 0)}
	MOV {T(3[2..])} {local((for_s), 1)}
	MOV {T(4[2..])} {local((for_var), 2)}
	BR {L2}
L1 (exit)
L2
	CBR {true} {L3, L4}
L3
	MOV {local((for_f), 0)} {T(1)}
	CALL {T(1), local((for_s), 1), local((for_var), 2)} {T(1..), 2 Kint(1)}
	MOV {T(1[1..])} {local(k, 3)}
	MOV {T(2[1..])} {local(v, 4)}
	BR {L5}
L4
	RET {L1}
L5
	EQ {local(k, 3), nil} {T(1)}
	CBR {T(1)} {L6, L7}
L6
	BR {L4}
L7
	MOV {local(k, 3)} {T(2)}
	MOV {T(2)} {local((for_var), 2)}
	LOADGLOBAL {Upval(_ENV), 'print' Ks(2)} {T(2)}
	CALL {T(2), local(k, 3), local(v, 4)} {T(2..), 1 Kint(2)}
	BR {L2}
L8
	BR {L7}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'pairs' Ks(0)} {T(0)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 't' Ks(1)} {T(1)}</TD></TR>
<TR><TD>MOV {T(0)} {T(2)}</TD></TR>
<TR><TD>CALL {T(2), T(1)} {T(2..), 3 Kint(0)}</TD></TR>
<TR><TD>MOV {T(2[2..])} {local((for_f), 0)}</TD></TR>
<TR><TD>MOV {T(3[2..])} {local((for_s), 1)}</TD></TR>
<TR><TD>MOV {T(4[2..])} {local((for_var), 2)}</TD></TR>
<TR><TD>BR {L2}</TD></TR>
</TABLE>>];
L0 -> L2
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>CBR {true} {L3, L4}</TD></TR>
</TABLE>>];
L2 -> L3
L2 -> L4
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>MOV {local((for_f), 0)} {T(1)}</TD></TR>
<TR><TD>CALL {T(1), local((for_s), 1), local((for_var), 2)} {T(1..), 2 Kint(1)}</TD></TR>
<TR><TD>MOV {T(1[1..])} {local(k, 3)}</TD></TR>
<TR><TD>MOV {T(2[1..])} {local(v, 4)}</TD></TR>
<TR><TD>BR {L5}</TD></TR>
</TABLE>>];
L3 -> L5
L4 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L4</B></TD></TR>
<TR><TD>RET {L1}</TD></TR>
</TABLE>>];
L4 -> L1
L5 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L5</B></TD></TR>
<TR><TD>EQ {local(k, 3), nil} {T(1)}</TD></TR>
<TR><TD>CBR {T(1)} {L6, L7}</TD></TR>
</TABLE>>];
L5 -> L6
L5 -> L7
L6 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L6</B></TD></TR>
<TR><TD>BR {L4}</TD></TR>
</TABLE>>];
L6 -> L4
L7 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L7</B></TD></TR>
<TR><TD>MOV {local(k, 3)} {T(2)}</TD></TR>
<TR><TD>MOV {T(2)} {local((for_var), 2)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'print' Ks(2)} {T(2)}</TD></TR>
<TR><TD>CALL {T(2), local(k, 3), local(v, 4)} {T(2..), 1 Kint(2)}</TD></TR>
<TR><TD>BR {L2}</TD></TR>
</TABLE>>];
L7 -> L2
L8 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L8</B></TD></TR>
<TR><TD>BR {L7}</TD></TR>
</TABLE>>];
L8 -> L7
}
