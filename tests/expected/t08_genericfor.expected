for k,v in pairs(t) do
    print(k,v)
end

function()
--upvalues  _ENV*
  for
  --[local symbols] k, v
    k --local symbol any  
   ,
    v --local symbol any  
  in
    --[suffixed expr start] any
     --[primary start] any
       pairs --global symbol any 
     --[primary end]
     --[suffix list start]
       --[function call start] any
        (
          --[suffixed expr start] any
           --[primary start] any
             t --global symbol any 
           --[primary end]
          --[suffixed expr end]
        )
       --[function call end]
     --[suffix list end]
    --[suffixed expr end]
  do
     --[expression statement start]
      --[expression list start]
        --[suffixed expr start] any
         --[primary start] any
           print --global symbol any 
         --[primary end]
         --[suffix list start]
           --[function call start] any
            (
              --[suffixed expr start] any
               --[primary start] any
                 k --local symbol any  
               --[primary end]
              --[suffixed expr end]
             ,
              --[suffixed expr start] any
               --[primary start] any
                 v --local symbol any  
               --[primary end]
              --[suffixed expr end]
            )
           --[function call end]
         --[suffix list end]
        --[suffixed expr end]
      --[expression list end]
     --[expression statement end]
  end
end
function()
--upvalues  _ENV*
  do
  --[local symbols] (for_f), (for_s), (for_var)
    local
    --[symbols]
      (for_f) --local symbol any  
     ,
      (for_s) --local symbol any  
     ,
      (for_var) --local symbol any  
    --[expressions]
      --[suffixed expr start] any
       --[primary start] any
         pairs --global symbol any 
       --[primary end]
       --[suffix list start]
         --[function call start] any
          (
            --[suffixed expr start] any
             --[primary start] any
               t --global symbol any 
             --[primary end]
            --[suffixed expr end]
          )
         --[function call end]
       --[suffix list end]
      --[suffixed expr end]
    while
    --[local symbols] k, v
     true
    do
      local
      --[symbols]
        k --local symbol any  
       ,
        v --local symbol any  
      --[expressions]
        --[suffixed expr start] any
         --[primary start] any
           (for_f) --local symbol any  
         --[primary end]
         --[suffix list start]
           --[function call start] any
            (
               (for_s) --local symbol any  
             ,
               (for_var) --local symbol any  
            )
           --[function call end]
         --[suffix list end]
        --[suffixed expr end]
      if
       --[binary expr start] any
         k --local symbol any  
       ==
        nil
       --[binary expr end]
      then
        goto break
      end
      --[expression statement start]
       --[var list start]
          (for_var) --local symbol any  
       = --[var list end]
       --[expression list start]
          k --local symbol any  
       --[expression list end]
      --[expression statement end]
      --[expression statement start]
       --[expression list start]
         --[suffixed expr start] any
          --[primary start] any
            print --global symbol any 
          --[primary end]
          --[suffix list start]
            --[function call start] any
             (
               --[suffixed expr start] any
                --[primary start] any
                  k --local symbol any  
                --[primary end]
               --[suffixed expr end]
              ,
               --[suffixed expr start] any
                --[primary start] any
                  v --local symbol any  
                --[primary end]
               --[suffixed expr end]
             )
            --[function call end]
          --[suffix list end]
         --[suffixed expr end]
       --[expression list end]
      --[expression statement end]
    end
  end
end
define Proc%1
L0 (entry)
	LOADGLOBAL {Upval(_ENV), 'pairs' Ks(0)} {T(0)}
	LOADGLOBAL {Upval(_ENV), 't' Ks(1)} {T(1)}
	CALL {T(0), T(1)} {T(0..), 3 Kint(0)}
	MOV {T(0[0..])} {local((for_f), 0)}
	MOV {T(1[0..])} {local((for_s), 1)}
	MOV {T(2[0..])} {local((for_var), 2)}
	BR {L2}
L1 (exit)
L2
	CBR {true} {L3, L4}
L3
	MOV {local((for_f), 0)} {T(0)}
	CALL {T(0), local((for_s), 1), local((for_var), 2)} {T(0..), 2 Kint(1)}
	MOV {T(0[0..])} {local(k, 3)}
	MOV {T(1[0..])} {local(v, 4)}
	BR {L5}
L4
	RET {L1}
L5
	EQ {local(k, 3), nil} {T(0)}
	CBR {T(0)} {L6, L7}
L6
	BR {L4}
L7
	MOV {local(k, 3)} {T(0)}
	MOV {T(0)} {local((for_var), 2)}
	LOADGLOBAL {Upval(_ENV), 'print' Ks(2)} {T(0)}
	CALL {T(0), local(k, 3), local(v, 4)} {T(0..), 1 Kint(2)}
	BR {L2}
L8
	BR {L7}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'pairs' Ks(0)} {T(0)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 't' Ks(1)} {T(1)}</TD></TR>
<TR><TD>CALL {T(0), T(1)} {T(0..), 3 Kint(0)}</TD></TR>
<TR><TD>MOV {T(0[0..])} {local((for_f), 0)}</TD></TR>
<TR><TD>MOV {T(1[0..])} {local((for_s), 1)}</TD></TR>
<TR><TD>MOV {T(2[0..])} {local((for_var), 2)}</TD></TR>
<TR><TD>BR {L2}</TD></TR>
</TABLE>>];
L0 -> L2
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>CBR {true} {L3, L4}</TD></TR>
</TABLE>>];
L2 -> L3
L2 -> L4
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>MOV {local((for_f), 0)} {T(0)}</TD></TR>
<TR><TD>CALL {T(0), local((for_s), 1), local((for_var), 2)} {T(0..), 2 Kint(1)}</TD></TR>
<TR><TD>MOV {T(0[0..])} {local(k, 3)}</TD></TR>
<TR><TD>MOV {T(1[0..])} {local(v, 4)}</TD></TR>
<TR><TD>BR {L5}</TD></TR>
</TABLE>>];
L3 -> L5
L4 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L4</B></TD></TR>
<TR><TD>RET {L1}</TD></TR>
</TABLE>>];
L4 -> L1
L5 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L5</B></TD></TR>
<TR><TD>EQ {local(k, 3), nil} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L6, L7}</TD></TR>
</TABLE>>];
L5 -> L6
L5 -> L7
L6 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L6</B></TD></TR>
<TR><TD>BR {L4}</TD></TR>
</TABLE>>];
L6 -> L4
L7 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L7</B></TD></TR>
<TR><TD>MOV {local(k, 3)} {T(0)}</TD></TR>
<TR><TD>MOV {T(0)} {local((for_var), 2)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'print' Ks(2)} {T(0)}</TD></TR>
<TR><TD>CALL {T(0), local(k, 3), local(v, 4)} {T(0..), 1 Kint(2)}</TD></TR>
<TR><TD>BR {L2}</TD></TR>
</TABLE>>];
L7 -> L2
L8 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L8</B></TD></TR>
<TR><TD>BR {L7}</TD></TR>
</TABLE>>];
L8 -> L7
}
local values = {}
for k,v in pairs({ name='Dibyendu', surname='Majumdar' }) do
    local key = k
    local value = v
    values[key] = value
end

function()
--upvalues  _ENV*
--[local symbols] values
  local
  --[symbols]
    values --local symbol any   const
  --[expressions]
    { --[table constructor start] table
    } --[table constructor end]
  for
  --[local symbols] k, v
    k --local symbol any  
   ,
    v --local symbol any  
  in
    --[suffixed expr start] any
     --[primary start] any
       pairs --global symbol any 
     --[primary end]
     --[suffix list start]
       --[function call start] any
        (
          { --[table constructor start] table
            --[indexed assign start] string
            --[index start]
             --[field selector start] any
              .
               'name'
             --[field selector end]
            --[index end]
            --[value start]
             'Dibyendu'
            --[value end]
            --[indexed assign end]
           ,
            --[indexed assign start] string
            --[index start]
             --[field selector start] any
              .
               'surname'
             --[field selector end]
            --[index end]
            --[value start]
             'Majumdar'
            --[value end]
            --[indexed assign end]
          } --[table constructor end]
        )
       --[function call end]
     --[suffix list end]
    --[suffixed expr end]
  do
  --[local symbols] key, value
     local
     --[symbols]
       key --local symbol any   const
     --[expressions]
       --[suffixed expr start] any
        --[primary start] any
          k --local symbol any  
        --[primary end]
       --[suffixed expr end]
     local
     --[symbols]
       value --local symbol any   const
     --[expressions]
       --[suffixed expr start] any
        --[primary start] any
          v --local symbol any  
        --[primary end]
       --[suffixed expr end]
     --[expression statement start]
      --[var list start]
        --[suffixed expr start] any
         --[primary start] any
           values --local symbol any   const
         --[primary end]
         --[suffix list start]
           --[Y index start] any
            [
             --[suffixed expr start] any
              --[primary start] any
                key --local symbol any   const
              --[primary end]
             --[suffixed expr end]
            ]
           --[Y index end]
         --[suffix list end]
        --[suffixed expr end]
      = --[var list end]
      --[expression list start]
        --[suffixed expr start] any
         --[primary start] any
           value --local symbol any   const
         --[primary end]
        --[suffixed expr end]
      --[expression list end]
     --[expression statement end]
  end
end
function()
--upvalues  _ENV*
--[local symbols] values
  local
  --[symbols]
    values --local symbol any   const
  --[expressions]
    { --[table constructor start] table
    } --[table constructor end]
  do
  --[local symbols] (for_f), (for_s), (for_var)
    local
    --[symbols]
      (for_f) --local symbol any  
     ,
      (for_s) --local symbol any  
     ,
      (for_var) --local symbol any  
    --[expressions]
      --[suffixed expr start] any
       --[primary start] any
         pairs --global symbol any 
       --[primary end]
       --[suffix list start]
         --[function call start] any
          (
            { --[table constructor start] table
              --[indexed assign start] string
              --[index start]
               --[field selector start] any
                .
                 'name'
               --[field selector end]
              --[index end]
              --[value start]
               'Dibyendu'
              --[value end]
              --[indexed assign end]
             ,
              --[indexed assign start] string
              --[index start]
               --[field selector start] any
                .
                 'surname'
               --[field selector end]
              --[index end]
              --[value start]
               'Majumdar'
              --[value end]
              --[indexed assign end]
            } --[table constructor end]
          )
         --[function call end]
       --[suffix list end]
      --[suffixed expr end]
    while
    --[local symbols] k, v, key, value
     true
    do
      local
      --[symbols]
        k --local symbol any  
       ,
        v --local symbol any  
      --[expressions]
        --[suffixed expr start] any
         --[primary start] any
           (for_f) --local symbol any  
         --[primary end]
         --[suffix list start]
           --[function call start] any
            (
               (for_s) --local symbol any  
             ,
               (for_var) --local symbol any  
            )
           --[function call end]
         --[suffix list end]
        --[suffixed expr end]
      if
       --[binary expr start] any
         k --local symbol any  
       ==
        nil
       --[binary expr end]
      then
        goto break
      end
      --[expression statement start]
       --[var list start]
          (for_var) --local symbol any  
       = --[var list end]
       --[expression list start]
          k --local symbol any  
       --[expression list end]
      --[expression statement end]
      local
      --[symbols]
        key --local symbol any   const
      --[expressions]
        --[suffixed expr start] any
         --[primary start] any
           k --local symbol any  
         --[primary end]
        --[suffixed expr end]
      local
      --[symbols]
        value --local symbol any   const
      --[expressions]
        --[suffixed expr start] any
         --[primary start] any
           v --local symbol any  
         --[primary end]
        --[suffixed expr end]
      --[expression statement start]
       --[var list start]
         --[suffixed expr start] any
          --[primary start] any
            values --local symbol any   const
          --[primary end]
          --[suffix list start]
            --[Y index start] any
             [
              --[suffixed expr start] any
               --[primary start] any
                 key --local symbol any   const
               --[primary end]
              --[suffixed expr end]
             ]
            --[Y index end]
          --[suffix list end]
         --[suffixed expr end]
       = --[var list end]
       --[expression list start]
         --[suffixed expr start] any
          --[primary start] any
            value --local symbol any   const
          --[primary end]
         --[suffixed expr end]
       --[expression list end]
      --[expression statement end]
    end
  end
end
define Proc%1
L0 (entry)
	NEWTABLE {T(0)}
	MOV {T(0)} {local(values, 0)}
	LOADGLOBAL {Upval(_ENV), 'pairs' Ks(0)} {T(0)}
	NEWTABLE {T(1)}
	TPUTsk {'Dibyendu' Ks(2)} {T(1), 'name' Ks(1)}
	TPUTsk {'Majumdar' Ks(4)} {T(1), 'surname' Ks(3)}
	CALL {T(0), T(1)} {T(0..), 3 Kint(0)}
	MOV {T(0[0..])} {local((for_f), 1)}
	MOV {T(1[0..])} {local((for_s), 2)}
	MOV {T(2[0..])} {local((for_var), 3)}
	BR {L2}
L1 (exit)
L2
	CBR {true} {L3, L4}
L3
	MOV {local((for_f), 1)} {T(0)}
	CALL {T(0), local((for_s), 2), local((for_var), 3)} {T(0..), 2 Kint(1)}
	MOV {T(0[0..])} {local(k, 4)}
	MOV {T(1[0..])} {local(v, 5)}
	BR {L5}
L4
	RET {L1}
L5
	EQ {local(k, 4), nil} {T(0)}
	CBR {T(0)} {L6, L7}
L6
	BR {L4}
L7
	MOV {local(k, 4)} {T(0)}
	MOV {T(0)} {local((for_var), 3)}
	MOV {local(k, 4)} {T(0)}
	MOV {T(0)} {local(key, 6)}
	MOV {local(v, 5)} {T(0)}
	MOV {T(0)} {local(value, 7)}
	MOV {local(value, 7)} {T(0)}
	PUT {T(0)} {local(values, 0), local(key, 6)}
	BR {L2}
L8
	BR {L7}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>NEWTABLE {T(0)}</TD></TR>
<TR><TD>MOV {T(0)} {local(values, 0)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'pairs' Ks(0)} {T(0)}</TD></TR>
<TR><TD>NEWTABLE {T(1)}</TD></TR>
<TR><TD>TPUTsk {'Dibyendu' Ks(2)} {T(1), 'name' Ks(1)}</TD></TR>
<TR><TD>TPUTsk {'Majumdar' Ks(4)} {T(1), 'surname' Ks(3)}</TD></TR>
<TR><TD>CALL {T(0), T(1)} {T(0..), 3 Kint(0)}</TD></TR>
<TR><TD>MOV {T(0[0..])} {local((for_f), 1)}</TD></TR>
<TR><TD>MOV {T(1[0..])} {local((for_s), 2)}</TD></TR>
<TR><TD>MOV {T(2[0..])} {local((for_var), 3)}</TD></TR>
<TR><TD>BR {L2}</TD></TR>
</TABLE>>];
L0 -> L2
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>CBR {true} {L3, L4}</TD></TR>
</TABLE>>];
L2 -> L3
L2 -> L4
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>MOV {local((for_f), 1)} {T(0)}</TD></TR>
<TR><TD>CALL {T(0), local((for_s), 2), local((for_var), 3)} {T(0..), 2 Kint(1)}</TD></TR>
<TR><TD>MOV {T(0[0..])} {local(k, 4)}</TD></TR>
<TR><TD>MOV {T(1[0..])} {local(v, 5)}</TD></TR>
<TR><TD>BR {L5}</TD></TR>
</TABLE>>];
L3 -> L5
L4 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L4</B></TD></TR>
<TR><TD>RET {L1}</TD></TR>
</TABLE>>];
L4 -> L1
L5 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L5</B></TD></TR>
<TR><TD>EQ {local(k, 4), nil} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L6, L7}</TD></TR>
</TABLE>>];
L5 -> L6
L5 -> L7
L6 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L6</B></TD></TR>
<TR><TD>BR {L4}</TD></TR>
</TABLE>>];
L6 -> L4
L7 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L7</B></TD></TR>
<TR><TD>MOV {local(k, 4)} {T(0)}</TD></TR>
<TR><TD>MOV {T(0)} {local((for_var), 3)}</TD></TR>
<TR><TD>MOV {local(k, 4)} {T(0)}</TD></TR>
<TR><TD>MOV {T(0)} {local(key, 6)}</TD></TR>
<TR><TD>MOV {local(v, 5)} {T(0)}</TD></TR>
<TR><TD>MOV {T(0)} {local(value, 7)}</TD></TR>
<TR><TD>MOV {local(value, 7)} {T(0)}</TD></TR>
<TR><TD>PUT {T(0)} {local(values, 0), local(key, 6)}</TD></TR>
<TR><TD>BR {L2}</TD></TR>
</TABLE>>];
L7 -> L2
L8 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L8</B></TD></TR>
<TR><TD>BR {L7}</TD></TR>
</TABLE>>];
L8 -> L7
}
local values = {}
for k, v in pairs({name='Dibyendu'}) do
    for k, v in pairs({surname='Majumdar'}) do
        assert(k == 'surname')
        assert(v == 'Majumdar')
    end
    assert(k == 'name')
    assert(v == 'Dibyendu')
end

function()
--upvalues  _ENV*
--[local symbols] values
  local
  --[symbols]
    values --local symbol any   const
  --[expressions]
    { --[table constructor start] table
    } --[table constructor end]
  for
  --[local symbols] k, v
    k --local symbol any  
   ,
    v --local symbol any  
  in
    --[suffixed expr start] any
     --[primary start] any
       pairs --global symbol any 
     --[primary end]
     --[suffix list start]
       --[function call start] any
        (
          { --[table constructor start] table
            --[indexed assign start] string
            --[index start]
             --[field selector start] any
              .
               'name'
             --[field selector end]
            --[index end]
            --[value start]
             'Dibyendu'
            --[value end]
            --[indexed assign end]
          } --[table constructor end]
        )
       --[function call end]
     --[suffix list end]
    --[suffixed expr end]
  do
     for
     --[local symbols] k, v
       k --local symbol any  
      ,
       v --local symbol any  
     in
       --[suffixed expr start] any
        --[primary start] any
          pairs --global symbol any 
        --[primary end]
        --[suffix list start]
          --[function call start] any
           (
             { --[table constructor start] table
               --[indexed assign start] string
               --[index start]
                --[field selector start] any
                 .
                  'surname'
                --[field selector end]
               --[index end]
               --[value start]
                'Majumdar'
               --[value end]
               --[indexed assign end]
             } --[table constructor end]
           )
          --[function call end]
        --[suffix list end]
       --[suffixed expr end]
     do
        --[expression statement start]
         --[expression list start]
           --[suffixed expr start] any
            --[primary start] any
              assert --global symbol any 
            --[primary end]
            --[suffix list start]
              --[function call start] any
               (
                 --[binary expr start] any
                  --[suffixed expr start] any
                   --[primary start] any
                     k --local symbol any  
                   --[primary end]
                  --[suffixed expr end]
                 ==
                  'surname'
                 --[binary expr end]
               )
              --[function call end]
            --[suffix list end]
           --[suffixed expr end]
         --[expression list end]
        --[expression statement end]
        --[expression statement start]
         --[expression list start]
           --[suffixed expr start] any
            --[primary start] any
              assert --global symbol any 
            --[primary end]
            --[suffix list start]
              --[function call start] any
               (
                 --[binary expr start] any
                  --[suffixed expr start] any
                   --[primary start] any
                     v --local symbol any  
                   --[primary end]
                  --[suffixed expr end]
                 ==
                  'Majumdar'
                 --[binary expr end]
               )
              --[function call end]
            --[suffix list end]
           --[suffixed expr end]
         --[expression list end]
        --[expression statement end]
     end
     --[expression statement start]
      --[expression list start]
        --[suffixed expr start] any
         --[primary start] any
           assert --global symbol any 
         --[primary end]
         --[suffix list start]
           --[function call start] any
            (
              --[binary expr start] any
               --[suffixed expr start] any
                --[primary start] any
                  k --local symbol any  
                --[primary end]
               --[suffixed expr end]
              ==
               'name'
              --[binary expr end]
            )
           --[function call end]
         --[suffix list end]
        --[suffixed expr end]
      --[expression list end]
     --[expression statement end]
     --[expression statement start]
      --[expression list start]
        --[suffixed expr start] any
         --[primary start] any
           assert --global symbol any 
         --[primary end]
         --[suffix list start]
           --[function call start] any
            (
              --[binary expr start] any
               --[suffixed expr start] any
                --[primary start] any
                  v --local symbol any  
                --[primary end]
               --[suffixed expr end]
              ==
               'Dibyendu'
              --[binary expr end]
            )
           --[function call end]
         --[suffix list end]
        --[suffixed expr end]
      --[expression list end]
     --[expression statement end]
  end
end
function()
--upvalues  _ENV*
--[local symbols] values
  local
  --[symbols]
    values --local symbol any   const
  --[expressions]
    { --[table constructor start] table
    } --[table constructor end]
  do
  --[local symbols] (for_f), (for_s), (for_var)
    local
    --[symbols]
      (for_f) --local symbol any  
     ,
      (for_s) --local symbol any  
     ,
      (for_var) --local symbol any  
    --[expressions]
      --[suffixed expr start] any
       --[primary start] any
         pairs --global symbol any 
       --[primary end]
       --[suffix list start]
         --[function call start] any
          (
            { --[table constructor start] table
              --[indexed assign start] string
              --[index start]
               --[field selector start] any
                .
                 'name'
               --[field selector end]
              --[index end]
              --[value start]
               'Dibyendu'
              --[value end]
              --[indexed assign end]
            } --[table constructor end]
          )
         --[function call end]
       --[suffix list end]
      --[suffixed expr end]
    while
    --[local symbols] k, v
     true
    do
      local
      --[symbols]
        k --local symbol any  
       ,
        v --local symbol any  
      --[expressions]
        --[suffixed expr start] any
         --[primary start] any
           (for_f) --local symbol any  
         --[primary end]
         --[suffix list start]
           --[function call start] any
            (
               (for_s) --local symbol any  
             ,
               (for_var) --local symbol any  
            )
           --[function call end]
         --[suffix list end]
        --[suffixed expr end]
      if
       --[binary expr start] any
         k --local symbol any  
       ==
        nil
       --[binary expr end]
      then
        goto break
      end
      --[expression statement start]
       --[var list start]
          (for_var) --local symbol any  
       = --[var list end]
       --[expression list start]
          k --local symbol any  
       --[expression list end]
      --[expression statement end]
      do
      --[local symbols] (for_f), (for_s), (for_var)
        local
        --[symbols]
          (for_f) --local symbol any  
         ,
          (for_s) --local symbol any  
         ,
          (for_var) --local symbol any  
        --[expressions]
          --[suffixed expr start] any
           --[primary start] any
             pairs --global symbol any 
           --[primary end]
           --[suffix list start]
             --[function call start] any
              (
                { --[table constructor start] table
                  --[indexed assign start] string
                  --[index start]
                   --[field selector start] any
                    .
                     'surname'
                   --[field selector end]
                  --[index end]
                  --[value start]
                   'Majumdar'
                  --[value end]
                  --[indexed assign end]
                } --[table constructor end]
              )
             --[function call end]
           --[suffix list end]
          --[suffixed expr end]
        while
        --[local symbols] k, v
         true
        do
          local
          --[symbols]
            k --local symbol any  
           ,
            v --local symbol any  
          --[expressions]
            --[suffixed expr start] any
             --[primary start] any
               (for_f) --local symbol any  
             --[primary end]
             --[suffix list start]
               --[function call start] any
                (
                   (for_s) --local symbol any  
                 ,
                   (for_var) --local symbol any  
                )
               --[function call end]
             --[suffix list end]
            --[suffixed expr end]
          if
           --[binary expr start] any
             k --local symbol any  
           ==
            nil
           --[binary expr end]
          then
            goto break
          end
          --[expression statement start]
           --[var list start]
              (for_var) --local symbol any  
           = --[var list end]
           --[expression list start]
              k --local symbol any  
           --[expression list end]
          --[expression statement end]
          --[expression statement start]
           --[expression list start]
             --[suffixed expr start] any
              --[primary start] any
                assert --global symbol any 
              --[primary end]
              --[suffix list start]
                --[function call start] any
                 (
                   --[binary expr start] any
                    --[suffixed expr start] any
                     --[primary start] any
                       k --local symbol any  
                     --[primary end]
                    --[suffixed expr end]
                   ==
                    'surname'
                   --[binary expr end]
                 )
                --[function call end]
              --[suffix list end]
             --[suffixed expr end]
           --[expression list end]
          --[expression statement end]
          --[expression statement start]
           --[expression list start]
             --[suffixed expr start] any
              --[primary start] any
                assert --global symbol any 
              --[primary end]
              --[suffix list start]
                --[function call start] any
                 (
                   --[binary expr start] any
                    --[suffixed expr start] any
                     --[primary start] any
                       v --local symbol any  
                     --[primary end]
                    --[suffixed expr end]
                   ==
                    'Majumdar'
                   --[binary expr end]
                 )
                --[function call end]
              --[suffix list end]
             --[suffixed expr end]
           --[expression list end]
          --[expression statement end]
        end
      end
      --[expression statement start]
       --[expression list start]
         --[suffixed expr start] any
          --[primary start] any
            assert --global symbol any 
          --[primary end]
          --[suffix list start]
            --[function call start] any
             (
               --[binary expr start] any
                --[suffixed expr start] any
                 --[primary start] any
                   k --local symbol any  
                 --[primary end]
                --[suffixed expr end]
               ==
                'name'
               --[binary expr end]
             )
            --[function call end]
          --[suffix list end]
         --[suffixed expr end]
       --[expression list end]
      --[expression statement end]
      --[expression statement start]
       --[expression list start]
         --[suffixed expr start] any
          --[primary start] any
            assert --global symbol any 
          --[primary end]
          --[suffix list start]
            --[function call start] any
             (
               --[binary expr start] any
                --[suffixed expr start] any
                 --[primary start] any
                   v --local symbol any  
                 --[primary end]
                --[suffixed expr end]
               ==
                'Dibyendu'
               --[binary expr end]
             )
            --[function call end]
          --[suffix list end]
         --[suffixed expr end]
       --[expression list end]
      --[expression statement end]
    end
  end
end
define Proc%1
L0 (entry)
	NEWTABLE {T(0)}
	MOV {T(0)} {local(values, 0)}
	LOADGLOBAL {Upval(_ENV), 'pairs' Ks(0)} {T(0)}
	NEWTABLE {T(1)}
	TPUTsk {'Dibyendu' Ks(2)} {T(1), 'name' Ks(1)}
	CALL {T(0), T(1)} {T(0..), 3 Kint(0)}
	MOV {T(0[0..])} {local((for_f), 1)}
	MOV {T(1[0..])} {local((for_s), 2)}
	MOV {T(2[0..])} {local((for_var), 3)}
	BR {L2}
L1 (exit)
L2
	CBR {true} {L3, L4}
L3
	MOV {local((for_f), 1)} {T(0)}
	CALL {T(0), local((for_s), 2), local((for_var), 3)} {T(0..), 2 Kint(1)}
	MOV {T(0[0..])} {local(k, 4)}
	MOV {T(1[0..])} {local(v, 5)}
	BR {L5}
L4
	RET {L1}
L5
	EQ {local(k, 4), nil} {T(0)}
	CBR {T(0)} {L6, L7}
L6
	BR {L4}
L7
	MOV {local(k, 4)} {T(0)}
	MOV {T(0)} {local((for_var), 3)}
	LOADGLOBAL {Upval(_ENV), 'pairs' Ks(0)} {T(0)}
	NEWTABLE {T(1)}
	TPUTsk {'Majumdar' Ks(4)} {T(1), 'surname' Ks(3)}
	CALL {T(0), T(1)} {T(0..), 3 Kint(0)}
	MOV {T(0[0..])} {local((for_f), 6)}
	MOV {T(1[0..])} {local((for_s), 7)}
	MOV {T(2[0..])} {local((for_var), 8)}
	BR {L9}
L8
	BR {L7}
L9
	CBR {true} {L10, L11}
L10
	MOV {local((for_f), 6)} {T(0)}
	CALL {T(0), local((for_s), 7), local((for_var), 8)} {T(0..), 2 Kint(1)}
	MOV {T(0[0..])} {local(k, 9)}
	MOV {T(1[0..])} {local(v, 10)}
	BR {L12}
L11
	LOADGLOBAL {Upval(_ENV), 'assert' Ks(5)} {T(0)}
	EQ {local(k, 4), 'name' Ks(1)} {T(1)}
	CALL {T(0), T(1)} {T(0..), 1 Kint(2)}
	LOADGLOBAL {Upval(_ENV), 'assert' Ks(5)} {T(0)}
	EQ {local(v, 5), 'Dibyendu' Ks(2)} {T(1)}
	CALL {T(0), T(1)} {T(0..), 1 Kint(2)}
	BR {L2}
L12
	EQ {local(k, 9), nil} {T(0)}
	CBR {T(0)} {L13, L14}
L13
	BR {L11}
L14
	MOV {local(k, 9)} {T(0)}
	MOV {T(0)} {local((for_var), 8)}
	LOADGLOBAL {Upval(_ENV), 'assert' Ks(5)} {T(0)}
	EQ {local(k, 9), 'surname' Ks(3)} {T(1)}
	CALL {T(0), T(1)} {T(0..), 1 Kint(2)}
	LOADGLOBAL {Upval(_ENV), 'assert' Ks(5)} {T(0)}
	EQ {local(v, 10), 'Majumdar' Ks(4)} {T(1)}
	CALL {T(0), T(1)} {T(0..), 1 Kint(2)}
	BR {L9}
L15
	BR {L14}
digraph Proc1 {
L0 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L0</B></TD></TR>
<TR><TD>NEWTABLE {T(0)}</TD></TR>
<TR><TD>MOV {T(0)} {local(values, 0)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'pairs' Ks(0)} {T(0)}</TD></TR>
<TR><TD>NEWTABLE {T(1)}</TD></TR>
<TR><TD>TPUTsk {'Dibyendu' Ks(2)} {T(1), 'name' Ks(1)}</TD></TR>
<TR><TD>CALL {T(0), T(1)} {T(0..), 3 Kint(0)}</TD></TR>
<TR><TD>MOV {T(0[0..])} {local((for_f), 1)}</TD></TR>
<TR><TD>MOV {T(1[0..])} {local((for_s), 2)}</TD></TR>
<TR><TD>MOV {T(2[0..])} {local((for_var), 3)}</TD></TR>
<TR><TD>BR {L2}</TD></TR>
</TABLE>>];
L0 -> L2
L2 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L2</B></TD></TR>
<TR><TD>CBR {true} {L3, L4}</TD></TR>
</TABLE>>];
L2 -> L3
L2 -> L4
L3 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L3</B></TD></TR>
<TR><TD>MOV {local((for_f), 1)} {T(0)}</TD></TR>
<TR><TD>CALL {T(0), local((for_s), 2), local((for_var), 3)} {T(0..), 2 Kint(1)}</TD></TR>
<TR><TD>MOV {T(0[0..])} {local(k, 4)}</TD></TR>
<TR><TD>MOV {T(1[0..])} {local(v, 5)}</TD></TR>
<TR><TD>BR {L5}</TD></TR>
</TABLE>>];
L3 -> L5
L4 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L4</B></TD></TR>
<TR><TD>RET {L1}</TD></TR>
</TABLE>>];
L4 -> L1
L5 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L5</B></TD></TR>
<TR><TD>EQ {local(k, 4), nil} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L6, L7}</TD></TR>
</TABLE>>];
L5 -> L6
L5 -> L7
L6 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L6</B></TD></TR>
<TR><TD>BR {L4}</TD></TR>
</TABLE>>];
L6 -> L4
L7 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L7</B></TD></TR>
<TR><TD>MOV {local(k, 4)} {T(0)}</TD></TR>
<TR><TD>MOV {T(0)} {local((for_var), 3)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'pairs' Ks(0)} {T(0)}</TD></TR>
<TR><TD>NEWTABLE {T(1)}</TD></TR>
<TR><TD>TPUTsk {'Majumdar' Ks(4)} {T(1), 'surname' Ks(3)}</TD></TR>
<TR><TD>CALL {T(0), T(1)} {T(0..), 3 Kint(0)}</TD></TR>
<TR><TD>MOV {T(0[0..])} {local((for_f), 6)}</TD></TR>
<TR><TD>MOV {T(1[0..])} {local((for_s), 7)}</TD></TR>
<TR><TD>MOV {T(2[0..])} {local((for_var), 8)}</TD></TR>
<TR><TD>BR {L9}</TD></TR>
</TABLE>>];
L7 -> L9
L8 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L8</B></TD></TR>
<TR><TD>BR {L7}</TD></TR>
</TABLE>>];
L8 -> L7
L9 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L9</B></TD></TR>
<TR><TD>CBR {true} {L10, L11}</TD></TR>
</TABLE>>];
L9 -> L10
L9 -> L11
L10 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L10</B></TD></TR>
<TR><TD>MOV {local((for_f), 6)} {T(0)}</TD></TR>
<TR><TD>CALL {T(0), local((for_s), 7), local((for_var), 8)} {T(0..), 2 Kint(1)}</TD></TR>
<TR><TD>MOV {T(0[0..])} {local(k, 9)}</TD></TR>
<TR><TD>MOV {T(1[0..])} {local(v, 10)}</TD></TR>
<TR><TD>BR {L12}</TD></TR>
</TABLE>>];
L10 -> L12
L11 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L11</B></TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'assert' Ks(5)} {T(0)}</TD></TR>
<TR><TD>EQ {local(k, 4), 'name' Ks(1)} {T(1)}</TD></TR>
<TR><TD>CALL {T(0), T(1)} {T(0..), 1 Kint(2)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'assert' Ks(5)} {T(0)}</TD></TR>
<TR><TD>EQ {local(v, 5), 'Dibyendu' Ks(2)} {T(1)}</TD></TR>
<TR><TD>CALL {T(0), T(1)} {T(0..), 1 Kint(2)}</TD></TR>
<TR><TD>BR {L2}</TD></TR>
</TABLE>>];
L11 -> L2
L12 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L12</B></TD></TR>
<TR><TD>EQ {local(k, 9), nil} {T(0)}</TD></TR>
<TR><TD>CBR {T(0)} {L13, L14}</TD></TR>
</TABLE>>];
L12 -> L13
L12 -> L14
L13 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L13</B></TD></TR>
<TR><TD>BR {L11}</TD></TR>
</TABLE>>];
L13 -> L11
L14 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L14</B></TD></TR>
<TR><TD>MOV {local(k, 9)} {T(0)}</TD></TR>
<TR><TD>MOV {T(0)} {local((for_var), 8)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'assert' Ks(5)} {T(0)}</TD></TR>
<TR><TD>EQ {local(k, 9), 'surname' Ks(3)} {T(1)}</TD></TR>
<TR><TD>CALL {T(0), T(1)} {T(0..), 1 Kint(2)}</TD></TR>
<TR><TD>LOADGLOBAL {Upval(_ENV), 'assert' Ks(5)} {T(0)}</TD></TR>
<TR><TD>EQ {local(v, 10), 'Majumdar' Ks(4)} {T(1)}</TD></TR>
<TR><TD>CALL {T(0), T(1)} {T(0..), 1 Kint(2)}</TD></TR>
<TR><TD>BR {L9}</TD></TR>
</TABLE>>];
L14 -> L9
L15 [shape=none, margin=0, label=<<TABLE BORDER="1" CELLBORDER="0">
<TR><TD><B>L15</B></TD></TR>
<TR><TD>BR {L14}</TD></TR>
</TABLE>>];
L15 -> L14
}
